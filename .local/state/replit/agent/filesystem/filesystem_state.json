{"file_contents":{"design_guidelines.md":{"content":"# IT Equipment Rental Management System - Design Guidelines\n\n## Design Approach Documentation\n\n**Selected Approach**: Design System Approach - Material Design\n**Justification**: This utility-focused enterprise application prioritizes efficiency and learnability for internal users. Material Design provides excellent patterns for data-heavy interfaces and form-intensive workflows.\n\n**Key Design Principles**:\n- Clarity and efficiency for daily operational use\n- Consistent patterns across complex workflows\n- Clear visual hierarchy for status tracking\n- Professional enterprise aesthetic\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors**:\n- Primary: 210 100% 50% (Material Blue)\n- Primary Light: 210 100% 85%\n- Primary Dark: 210 100% 30%\n\n**Status Colors**:\n- Success (Approved/Available): 120 60% 45%\n- Warning (Pending): 45 90% 55%\n- Error (Rejected/Overdue): 0 75% 55%\n- Info (Rented): 200 80% 50%\n\n**Neutral Colors**:\n- Background: 0 0% 98%\n- Surface: 0 0% 100%\n- Text Primary: 0 0% 13%\n- Text Secondary: 0 0% 46%\n- Border: 0 0% 88%\n\n**Dark Mode**:\n- Background: 220 13% 9%\n- Surface: 220 13% 13%\n- Text Primary: 0 0% 95%\n- Text Secondary: 0 0% 70%\n\n### B. Typography\n\n**Font Family**: Roboto (Material Design standard)\n- Headers: Roboto Medium (500 weight)\n- Body: Roboto Regular (400 weight)\n- Labels: Roboto Medium (500 weight)\n- Captions: Roboto Regular (400 weight)\n\n**Size Scale**: \n- H1: text-2xl (24px)\n- H2: text-xl (20px)\n- H3: text-lg (18px)\n- Body: text-base (16px)\n- Small: text-sm (14px)\n- Caption: text-xs (12px)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, and 8\n- Component padding: p-4, p-6\n- Section margins: m-4, m-6, m-8\n- Element spacing: gap-2, gap-4\n- Container max-width: max-w-7xl\n\n**Grid System**: 12-column responsive grid with consistent gutters\n\n### D. Component Library\n\n**Navigation**:\n- Top navigation bar with user info and logout\n- Sidebar navigation for main sections (Dashboard, Rentals, Items, Admin)\n- Breadcrumb navigation for deep pages\n\n**Forms**:\n- Material Design outlined input fields\n- Select dropdowns with search capability\n- Date range pickers for rental periods\n- File upload areas for item images\n- Clear validation states and error messages\n\n**Data Displays**:\n- Data tables with sorting, filtering, and pagination\n- Status badges with appropriate colors\n- Cards for item displays and rental summaries\n- Progress indicators for multi-step processes\n\n**Overlays**:\n- Modal dialogs for confirmations and detailed views\n- Toast notifications for actions and alerts\n- Tooltips for additional information\n- Loading states with skeleton screens\n\n**Buttons**:\n- Filled buttons for primary actions\n- Outlined buttons for secondary actions\n- Text buttons for tertiary actions\n- Icon buttons for compact interfaces\n\n### E. Animations\n\n**Minimal Animation Strategy**:\n- Subtle transitions (200ms ease) for state changes\n- Loading spinners for data fetching\n- Fade-in for dynamic content\n- No decorative animations to maintain professional focus\n\n## Visual Hierarchy\n\n**Status Priority**: Use color-coded badges and clear typography to make rental status immediately recognizable\n**Data Scanning**: Implement consistent table layouts with alternating row backgrounds\n**Action Clarity**: Primary actions use filled buttons, secondary actions use outlined buttons\n**Information Architecture**: Group related functions in cards with clear headers and sufficient whitespace\n\n## Responsive Considerations\n\n**Desktop-First**: Optimized for PC browser usage as specified\n**Tablet Support**: Maintain usability on tablets with adjusted spacing\n**Mobile Considerations**: Stack layouts vertically while preserving core functionality\n\nThis design system ensures a professional, efficient interface that supports the complex workflows of IT equipment rental management while maintaining consistency across all user interactions.","size_bytes":3912},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          available: \"hsl(120 60% 45%)\",\n          pending: \"hsl(45 90% 55%)\",\n          rented: \"hsl(200 80% 50%)\",\n          overdue: \"hsl(0 75% 55%)\",\n          approved: \"hsl(120 60% 45%)\",\n          rejected: \"hsl(0 75% 55%)\",\n          unavailable: \"hsl(0 0% 46%)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4178},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertItemSchema, insertRentalSchema, insertApprovalSchema } from \"@shared/schema\";\nimport { sendEmail, emailTemplates } from \"./email\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Items API\n  app.get(\"/api/items\", async (req, res) => {\n    try {\n      const items = await storage.getAllItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch items\" });\n    }\n  });\n\n  app.get(\"/api/items/available\", async (req, res) => {\n    try {\n      const items = await storage.getAvailableItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch available items\" });\n    }\n  });\n\n  app.get(\"/api/items/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const items = await storage.getItemsByCategory(category);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch items by category\" });\n    }\n  });\n\n  app.post(\"/api/items\", async (req, res) => {\n    try {\n      const validation = insertItemSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: \"Invalid item data\", details: validation.error });\n      }\n\n      // Validate serial number requirements by category\n      const isSerialRequired = validation.data.category !== \"소모품류\";\n      if (isSerialRequired && !validation.data.serialNumber?.trim()) {\n        return res.status(400).json({ \n          error: \"시리얼넘버는 필수입니다\", \n          details: `${validation.data.category} 카테고리는 시리얼넘버가 필요합니다.` \n        });\n      }\n\n      // Mock current user - in real app, get from session\n      const currentUser = \"admin\";\n      const item = await storage.createItem(validation.data, currentUser);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create item\" });\n    }\n  });\n\n  app.put(\"/api/items/:itemId\", async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      \n      // Validate serial number requirements if category is being updated\n      if (req.body.category) {\n        const isSerialRequired = req.body.category !== \"소모품류\";\n        if (isSerialRequired && !req.body.serialNumber?.trim()) {\n          return res.status(400).json({ \n            error: \"시리얼넘버는 필수입니다\", \n            details: `${req.body.category} 카테고리는 시리얼넘버가 필요합니다.` \n          });\n        }\n      }\n      \n      const updatedItem = await storage.updateItem(itemId, req.body);\n      \n      if (!updatedItem) {\n        return res.status(404).json({ error: \"Item not found\" });\n      }\n      \n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update item\" });\n    }\n  });\n\n  app.delete(\"/api/items/:itemId\", async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      const deleted = await storage.deleteItem(itemId);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Item not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete item\" });\n    }\n  });\n\n  // Rentals API\n  app.get(\"/api/rentals\", async (req, res) => {\n    try {\n      const rentals = await storage.getAllRentals();\n      res.json(rentals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch rentals\" });\n    }\n  });\n\n  app.get(\"/api/rentals/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const rentals = await storage.getRentalsByUserId(userId);\n      res.json(rentals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user rentals\" });\n    }\n  });\n\n  app.get(\"/api/rentals/pending\", async (req, res) => {\n    try {\n      const rentals = await storage.getPendingRentals();\n      res.json(rentals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending rentals\" });\n    }\n  });\n\n  app.get(\"/api/rentals/overdue\", async (req, res) => {\n    try {\n      const rentals = await storage.getOverdueRentals();\n      res.json(rentals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch overdue rentals\" });\n    }\n  });\n\n  app.post(\"/api/rentals\", async (req, res) => {\n    try {\n      const validation = insertRentalSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: \"Invalid rental data\", details: validation.error });\n      }\n\n      // Validate that item exists and is available\n      const item = await storage.getItemById(validation.data.itemId);\n      if (!item) {\n        return res.status(400).json({ error: \"물품을 찾을 수 없습니다\" });\n      }\n      if (item.status !== \"대여가능\") {\n        return res.status(400).json({ error: \"대여 불가능한 물품입니다\" });\n      }\n\n      // Check for existing active rentals for non-consumable items\n      if (item.category !== \"소모품류\") {\n        const existingRentals = await storage.getAllRentals();\n        const activeRental = existingRentals.find(r => \n          r.itemId === item.itemId && \n          (r.status === \"신청중\" || r.status === \"승인\" || r.status === \"대여중\")\n        );\n        \n        if (activeRental) {\n          return res.status(400).json({ \n            error: \"이미 대여 신청이나 대여 중인 물품입니다\",\n            details: `현재 상태: ${activeRental.status}` \n          });\n        }\n      }\n\n      const rental = await storage.createRental(validation.data);\n      \n      // Get user info for email notification\n      const user = await storage.getUserByDaouId(validation.data.userId);\n      \n      // Create approval record based on item category\n      if (item) {\n        const requiresApproval = [\"라우터\", \"스위치\", \"무선 제품군\", \"트랜시버\"].includes(item.category);\n        if (requiresApproval || item.category === \"소모품류\") {\n          // Determine approver based on category and business rules\n          const approverId = item.category === \"소모품류\" ? \"product-team-manager\" : \"tech-manager\";\n          \n          await storage.createApproval({\n            rentalId: rental.rentalId,\n            approverId,\n            approvalStatus: \"대기\",\n            note: null\n          });\n\n          // Send email notification to approver\n          if (user && process.env.SENDGRID_API_KEY) {\n            const template = emailTemplates.rentalRequest(\n              user.name, \n              item.name, \n              validation.data.expectedReturnDate\n            );\n            \n            // In a real app, get approver email from user management system\n            const approverEmail = item.category === \"소모품류\" \n              ? \"product-manager@company.com\" \n              : \"tech-manager@company.com\";\n            \n            await sendEmail({\n              to: approverEmail,\n              from: \"noreply@company.com\",\n              subject: template.subject,\n              text: template.text,\n              html: template.html\n            });\n          }\n        }\n      }\n\n      res.status(201).json(rental);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create rental\" });\n    }\n  });\n\n  app.put(\"/api/rentals/:rentalId\", async (req, res) => {\n    try {\n      const { rentalId } = req.params;\n      \n      // Validate request body if provided\n      if (Object.keys(req.body).length > 0) {\n        const allowedFields = ['expectedReturnDate', 'actualReturnDate', 'status'];\n        const invalidFields = Object.keys(req.body).filter(key => !allowedFields.includes(key));\n        if (invalidFields.length > 0) {\n          return res.status(400).json({ \n            error: \"Invalid fields\", \n            details: `Only ${allowedFields.join(', ')} can be updated` \n          });\n        }\n      }\n      \n      const updatedRental = await storage.updateRental(rentalId, req.body);\n      \n      if (!updatedRental) {\n        return res.status(404).json({ error: \"Rental not found\" });\n      }\n      \n      res.json(updatedRental);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update rental\" });\n    }\n  });\n\n  // Return rental endpoint\n  app.post(\"/api/rentals/:rentalId/return\", async (req, res) => {\n    try {\n      const { rentalId } = req.params;\n      \n      const rental = await storage.getRentalById(rentalId);\n      if (!rental) {\n        return res.status(404).json({ error: \"Rental not found\" });\n      }\n      \n      if (rental.status !== \"대여중\") {\n        return res.status(400).json({ error: \"물품이 대여 중이 아닙니다\" });\n      }\n      \n      // Update rental status to returned\n      const updatedRental = await storage.updateRental(rentalId, {\n        status: \"반납완료\",\n        actualReturnDate: new Date()\n      });\n      \n      // Update item status to available\n      await storage.updateItem(rental.itemId, { status: \"대여가능\" });\n      \n      res.json(updatedRental);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to return rental\" });\n    }\n  });\n\n  // Approvals API\n  app.get(\"/api/approvals/pending\", async (req, res) => {\n    try {\n      const approvals = await storage.getPendingApprovals();\n      res.json(approvals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending approvals\" });\n    }\n  });\n\n  app.get(\"/api/approvals/rental/:rentalId\", async (req, res) => {\n    try {\n      const { rentalId } = req.params;\n      const approvals = await storage.getApprovalsByRentalId(rentalId);\n      res.json(approvals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch rental approvals\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:approvalId/approve\", async (req, res) => {\n    try {\n      const { approvalId } = req.params;\n      const { note } = req.body;\n\n      const updatedApproval = await storage.updateApproval(approvalId, {\n        approvalStatus: \"승인\",\n        approvalDate: new Date(),\n        note: note || null\n      });\n\n      if (!updatedApproval) {\n        return res.status(404).json({ error: \"Approval not found\" });\n      }\n\n      // Check if this approval completes the rental approval process\n      const approvals = await storage.getApprovalsByRentalId(updatedApproval.rentalId);\n      const allApproved = approvals.every(approval => approval.approvalStatus === \"승인\");\n\n      if (allApproved) {\n        // Update rental status to approved and set rental date\n        await storage.updateRental(updatedApproval.rentalId, {\n          status: \"대여중\",\n          rentalDate: new Date()\n        });\n\n        // Update item status to unavailable\n        const rental = await storage.getRentalById(updatedApproval.rentalId);\n        if (rental) {\n          await storage.updateItem(rental.itemId, { status: \"대여불가\" });\n          \n          // Send approval email to user\n          const user = await storage.getUserByDaouId(rental.userId);\n          const item = await storage.getItemById(rental.itemId);\n          \n          if (user && item && process.env.SENDGRID_API_KEY) {\n            const template = emailTemplates.rentalApproved(\n              user.name,\n              item.name,\n              rental.expectedReturnDate\n            );\n            \n            await sendEmail({\n              to: user.email,\n              from: \"noreply@company.com\",\n              subject: template.subject,\n              text: template.text,\n              html: template.html\n            });\n          }\n        }\n      }\n\n      res.json(updatedApproval);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to approve rental\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:approvalId/reject\", async (req, res) => {\n    try {\n      const { approvalId } = req.params;\n      const { note } = req.body;\n\n      const updatedApproval = await storage.updateApproval(approvalId, {\n        approvalStatus: \"거절\",\n        approvalDate: new Date(),\n        note: note || null\n      });\n\n      if (!updatedApproval) {\n        return res.status(404).json({ error: \"Approval not found\" });\n      }\n\n      // Update rental status to rejected\n      await storage.updateRental(updatedApproval.rentalId, {\n        status: \"거절\"\n      });\n\n      // Send rejection email to user\n      const rental = await storage.getRentalById(updatedApproval.rentalId);\n      if (rental) {\n        const user = await storage.getUserByDaouId(rental.userId);\n        const item = await storage.getItemById(rental.itemId);\n        \n        if (user && item && process.env.SENDGRID_API_KEY) {\n          const template = emailTemplates.rentalRejected(\n            user.name,\n            item.name,\n            note\n          );\n          \n          await sendEmail({\n            to: user.email,\n            from: \"noreply@company.com\",\n            subject: template.subject,\n            text: template.text,\n            html: template.html\n          });\n        }\n      }\n\n      res.json(updatedApproval);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject rental\" });\n    }\n  });\n\n  // Dashboard stats API\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const allItems = await storage.getAllItems();\n      const availableItems = await storage.getAvailableItems();\n      const pendingApprovals = await storage.getPendingApprovals();\n      const overdueRentals = await storage.getOverdueRentals();\n      \n      // Mock user ID - in real app, get from session\n      const currentUserId = \"user123\";\n      const myActiveRentals = await storage.getRentalsByUserId(currentUserId);\n      const activeRentals = myActiveRentals.filter(r => r.status === \"대여중\");\n\n      const stats = {\n        totalItems: allItems.length,\n        availableItems: availableItems.length,\n        myActiveRentals: activeRentals.length,\n        pendingApprovals: pendingApprovals.length,\n        overdueRentals: overdueRentals.length\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Category stats API\n  app.get(\"/api/dashboard/categories\", async (req, res) => {\n    try {\n      const allItems = await storage.getAllItems();\n      const availableItems = await storage.getAvailableItems();\n      \n      const categories = [\"라우터\", \"스위치\", \"무선 제품군\", \"트랜시버\", \"소모품류\"];\n      const categoryStats = categories.map(category => {\n        const totalInCategory = allItems.filter(item => item.category === category).length;\n        const availableInCategory = availableItems.filter(item => item.category === category).length;\n        \n        return {\n          category,\n          total: totalInCategory,\n          available: availableInCategory\n        };\n      });\n\n      res.json(categoryStats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch category stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":15314},"server/storage.ts":{"content":"import { type User, type InsertUser, type Item, type InsertItem, type Rental, type InsertRental, type Approval, type InsertApproval, type RentalWithDetails } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByDaouId(daouId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Item methods\n  getAllItems(): Promise<Item[]>;\n  getItemById(itemId: string): Promise<Item | undefined>;\n  getItemsByCategory(category: string): Promise<Item[]>;\n  getAvailableItems(): Promise<Item[]>;\n  createItem(item: InsertItem, createdBy: string): Promise<Item>;\n  updateItem(itemId: string, updates: Partial<Item>): Promise<Item | undefined>;\n  deleteItem(itemId: string): Promise<boolean>;\n  \n  // Rental methods\n  getAllRentals(): Promise<RentalWithDetails[]>;\n  getRentalById(rentalId: string): Promise<RentalWithDetails | undefined>;\n  getRentalsByUserId(userId: string): Promise<RentalWithDetails[]>;\n  getPendingRentals(): Promise<RentalWithDetails[]>;\n  getOverdueRentals(): Promise<RentalWithDetails[]>;\n  createRental(rental: InsertRental): Promise<Rental>;\n  updateRental(rentalId: string, updates: Partial<Rental>): Promise<Rental | undefined>;\n  \n  // Approval methods\n  getApprovalsByRentalId(rentalId: string): Promise<Approval[]>;\n  getPendingApprovals(): Promise<Approval[]>;\n  createApproval(approval: InsertApproval): Promise<Approval>;\n  updateApproval(approvalId: string, updates: Partial<Approval>): Promise<Approval | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private items: Map<string, Item>;\n  private rentals: Map<string, Rental>;\n  private approvals: Map<string, Approval>;\n\n  constructor() {\n    this.users = new Map();\n    this.items = new Map();\n    this.rentals = new Map();\n    this.approvals = new Map();\n    \n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private async initializeSampleData() {\n    // Sample items for each category\n    const sampleItems: (Item)[] = [\n      // Router\n      { itemId: \"item-1\", category: \"라우터\", name: \"HUAWEI AR6120\", model: \"AR6120\", serialNumber: \"HW001234\", status: \"대여가능\", note: \"고성능 라우터\", createdBy: \"admin\", createdAt: new Date() },\n      { itemId: \"item-2\", category: \"라우터\", name: \"Cisco ISR 4321\", model: \"ISR4321\", serialNumber: \"CS001234\", status: \"대여가능\", note: null, createdBy: \"admin\", createdAt: new Date() },\n      \n      // Switch\n      { itemId: \"item-3\", category: \"스위치\", name: \"Cisco Catalyst 2960\", model: \"C2960-24TT-L\", serialNumber: \"CS002345\", status: \"대여가능\", note: \"24포트 스위치\", createdBy: \"admin\", createdAt: new Date() },\n      { itemId: \"item-4\", category: \"스위치\", name: \"HP ProCurve 2910\", model: \"J9145A\", serialNumber: \"HP002345\", status: \"대여불가\", note: null, createdBy: \"admin\", createdAt: new Date() },\n      \n      // Wireless\n      { itemId: \"item-5\", category: \"무선 제품군\", name: \"Cisco Aironet 2802\", model: \"AIR-AP2802I\", serialNumber: \"CS003456\", status: \"대여가능\", note: \"실내용 AP\", createdBy: \"admin\", createdAt: new Date() },\n      { itemId: \"item-6\", category: \"무선 제품군\", name: \"Ubiquiti UniFi AP\", model: \"U6-Lite\", serialNumber: \"UB003456\", status: \"대여가능\", note: null, createdBy: \"admin\", createdAt: new Date() },\n      \n      // 트랜시버\n      { itemId: \"item-7\", category: \"트랜시버\", name: \"SFP+ 10G 모듈\", model: \"SFP-10G-SR\", serialNumber: \"SF004567\", status: \"대여가능\", note: \"멀티모드 광모듈\", createdBy: \"admin\", createdAt: new Date() },\n      { itemId: \"item-8\", category: \"트랜시버\", name: \"QSFP+ 40G 모듈\", model: \"QSFP-40G-SR4\", serialNumber: \"QS004567\", status: \"대여가능\", note: null, createdBy: \"admin\", createdAt: new Date() },\n      \n      // 소모품\n      { itemId: \"item-9\", category: \"소모품류\", name: \"LC-LC 광점퍼코드\", model: null, serialNumber: null, status: \"대여가능\", note: \"3미터\", createdBy: \"admin\", createdAt: new Date() },\n      { itemId: \"item-10\", category: \"소모품류\", name: \"이더넷 케이블\", model: \"CAT6\", serialNumber: null, status: \"대여가능\", note: \"5미터\", createdBy: \"admin\", createdAt: new Date() },\n    ];\n    \n    sampleItems.forEach(item => {\n      this.items.set(item.itemId, item);\n    });\n\n    // Sample users\n    const sampleUsers: User[] = [\n      {\n        daouId: \"admin\",\n        name: \"관리자\",\n        department: \"상품운용팀\",\n        role: \"admin\",\n        email: \"admin@company.com\",\n        createdAt: new Date()\n      },\n      {\n        daouId: \"user001\",\n        name: \"이회원\",\n        department: \"상품운용팀\",\n        role: \"user\",\n        email: \"user001@company.com\",\n        createdAt: new Date()\n      },\n      {\n        daouId: \"user002\",\n        name: \"박기술\",\n        department: \"기술1팀\",\n        role: \"user\",\n        email: \"user002@company.com\",\n        createdAt: new Date()\n      }\n    ];\n\n    sampleUsers.forEach(user => {\n      this.users.set(user.daouId, user);\n    });\n\n    // Sample rentals\n    const sampleRentals: Rental[] = [\n      {\n        rentalId: \"rental-1\",\n        itemId: \"item-1\",\n        userId: \"user001\",\n        status: \"대여중\",\n        rentalDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n        expectedReturnDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n        actualReturnDate: null,\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago\n      },\n      {\n        rentalId: \"rental-2\",\n        itemId: \"item-3\",\n        userId: \"user002\",\n        status: \"신청중\",\n        rentalDate: null,\n        expectedReturnDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days from now\n        actualReturnDate: null,\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 day ago\n      },\n      {\n        rentalId: \"rental-3\",\n        itemId: \"item-5\",\n        userId: \"user001\",\n        status: \"반납완료\",\n        rentalDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago\n        expectedReturnDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n        actualReturnDate: new Date(),\n        createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10 days ago\n      },\n      {\n        rentalId: \"rental-4\",\n        itemId: \"item-9\",\n        userId: \"user002\",\n        status: \"승인\",\n        rentalDate: null,\n        expectedReturnDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now\n        actualReturnDate: null,\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago\n      }\n    ];\n\n    sampleRentals.forEach(rental => {\n      this.rentals.set(rental.rentalId, rental);\n    });\n  }\n\n  // User methods\n  async getUser(daouId: string): Promise<User | undefined> {\n    return this.users.get(daouId);\n  }\n\n  async getUserByDaouId(daouId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.daouId === daouId,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = { \n      ...insertUser, \n      role: insertUser.role || \"user\",\n      createdAt: new Date() \n    };\n    this.users.set(user.daouId, user);\n    return user;\n  }\n\n  // Item methods\n  async getAllItems(): Promise<Item[]> {\n    return Array.from(this.items.values());\n  }\n\n  async getItemById(itemId: string): Promise<Item | undefined> {\n    return this.items.get(itemId);\n  }\n\n  async getItemsByCategory(category: string): Promise<Item[]> {\n    return Array.from(this.items.values()).filter(item => item.category === category);\n  }\n\n  async getAvailableItems(): Promise<Item[]> {\n    return Array.from(this.items.values()).filter(item => item.status === \"대여가능\");\n  }\n\n  async createItem(insertItem: InsertItem, createdBy: string): Promise<Item> {\n    const item: Item = {\n      itemId: randomUUID(),\n      ...insertItem,\n      status: insertItem.status || \"대여가능\",\n      model: insertItem.model || null,\n      serialNumber: insertItem.serialNumber || null,\n      note: insertItem.note || null,\n      createdBy,\n      createdAt: new Date()\n    };\n    this.items.set(item.itemId, item);\n    return item;\n  }\n\n  async updateItem(itemId: string, updates: Partial<Item>): Promise<Item | undefined> {\n    const item = this.items.get(itemId);\n    if (!item) return undefined;\n    \n    const updatedItem = { ...item, ...updates };\n    this.items.set(itemId, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteItem(itemId: string): Promise<boolean> {\n    return this.items.delete(itemId);\n  }\n\n  // Rental methods\n  async getAllRentals(): Promise<RentalWithDetails[]> {\n    const rentals = Array.from(this.rentals.values());\n    return Promise.all(rentals.map(async rental => {\n      const item = await this.getItemById(rental.itemId);\n      const user = await this.getUserByDaouId(rental.userId);\n      const approvals = await this.getApprovalsByRentalId(rental.rentalId);\n      \n      return {\n        ...rental,\n        item: item!,\n        user: user!,\n        approvals\n      };\n    }));\n  }\n\n  async getRentalById(rentalId: string): Promise<RentalWithDetails | undefined> {\n    const rental = this.rentals.get(rentalId);\n    if (!rental) return undefined;\n    \n    const item = await this.getItemById(rental.itemId);\n    const user = await this.getUserByDaouId(rental.userId);\n    const approvals = await this.getApprovalsByRentalId(rental.rentalId);\n    \n    return {\n      ...rental,\n      item: item!,\n      user: user!,\n      approvals\n    };\n  }\n\n  async getRentalsByUserId(userId: string): Promise<RentalWithDetails[]> {\n    const userRentals = Array.from(this.rentals.values()).filter(rental => rental.userId === userId);\n    return Promise.all(userRentals.map(async rental => {\n      const item = await this.getItemById(rental.itemId);\n      const user = await this.getUserByDaouId(rental.userId);\n      const approvals = await this.getApprovalsByRentalId(rental.rentalId);\n      \n      return {\n        ...rental,\n        item: item!,\n        user: user!,\n        approvals\n      };\n    }));\n  }\n\n  async getPendingRentals(): Promise<RentalWithDetails[]> {\n    const pendingRentals = Array.from(this.rentals.values()).filter(rental => rental.status === \"신청중\");\n    return Promise.all(pendingRentals.map(async rental => {\n      const item = await this.getItemById(rental.itemId);\n      const user = await this.getUserByDaouId(rental.userId);\n      const approvals = await this.getApprovalsByRentalId(rental.rentalId);\n      \n      return {\n        ...rental,\n        item: item!,\n        user: user!,\n        approvals\n      };\n    }));\n  }\n\n  async getOverdueRentals(): Promise<RentalWithDetails[]> {\n    const today = new Date();\n    const overdueRentals = Array.from(this.rentals.values()).filter(rental => \n      rental.status === \"대여중\" && \n      rental.expectedReturnDate && \n      new Date(rental.expectedReturnDate) < today\n    );\n    \n    return Promise.all(overdueRentals.map(async rental => {\n      const item = await this.getItemById(rental.itemId);\n      const user = await this.getUserByDaouId(rental.userId);\n      const approvals = await this.getApprovalsByRentalId(rental.rentalId);\n      \n      return {\n        ...rental,\n        item: item!,\n        user: user!,\n        approvals\n      };\n    }));\n  }\n\n  async createRental(insertRental: InsertRental): Promise<Rental> {\n    const rental: Rental = {\n      rentalId: randomUUID(),\n      ...insertRental,\n      rentalDate: null,\n      actualReturnDate: null,\n      status: \"신청중\",\n      createdAt: new Date()\n    };\n    this.rentals.set(rental.rentalId, rental);\n    return rental;\n  }\n\n  async updateRental(rentalId: string, updates: Partial<Rental>): Promise<Rental | undefined> {\n    const rental = this.rentals.get(rentalId);\n    if (!rental) return undefined;\n    \n    const updatedRental = { ...rental, ...updates };\n    this.rentals.set(rentalId, updatedRental);\n    return updatedRental;\n  }\n\n  // Approval methods\n  async getApprovalsByRentalId(rentalId: string): Promise<Approval[]> {\n    return Array.from(this.approvals.values()).filter(approval => approval.rentalId === rentalId);\n  }\n\n  async getPendingApprovals(): Promise<Approval[]> {\n    return Array.from(this.approvals.values()).filter(approval => approval.approvalStatus === \"대기\");\n  }\n\n  async createApproval(insertApproval: InsertApproval): Promise<Approval> {\n    const approval: Approval = {\n      approvalId: randomUUID(),\n      ...insertApproval,\n      approvalStatus: insertApproval.approvalStatus || \"대기\",\n      note: insertApproval.note || null,\n      approvalDate: null\n    };\n    this.approvals.set(approval.approvalId, approval);\n    return approval;\n  }\n\n  async updateApproval(approvalId: string, updates: Partial<Approval>): Promise<Approval | undefined> {\n    const approval = this.approvals.get(approvalId);\n    if (!approval) return undefined;\n    \n    const updatedApproval = { ...approval, ...updates };\n    this.approvals.set(approvalId, updatedApproval);\n    return updatedApproval;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":13394},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const categoryEnum = pgEnum(\"category\", [\"라우터\", \"스위치\", \"무선 제품군\", \"트랜시버\", \"소모품류\"]);\nexport const statusEnum = pgEnum(\"status\", [\"대여가능\", \"대여불가\"]);\nexport const rentalStatusEnum = pgEnum(\"rental_status\", [\"신청중\", \"승인\", \"대여중\", \"반납완료\", \"거절\"]);\nexport const approvalStatusEnum = pgEnum(\"approval_status\", [\"승인\", \"거절\", \"대기\"]);\nexport const roleEnum = pgEnum(\"role\", [\"admin\", \"user\"]);\nexport const departmentEnum = pgEnum(\"department\", [\"상품운용팀\", \"전략사업본부\", \"기술1팀\", \"기술2팀\", \"기술3팀\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  daouId: varchar(\"daou_id\", { length: 100 }).primaryKey(),\n  name: text(\"name\").notNull(),\n  department: departmentEnum(\"department\").notNull(),\n  role: roleEnum(\"role\").notNull().default(\"user\"),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n});\n\n// Items table\nexport const items = pgTable(\"items\", {\n  itemId: varchar(\"item_id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: categoryEnum(\"category\").notNull(),\n  name: text(\"name\").notNull(),\n  model: text(\"model\"),\n  serialNumber: text(\"serial_number\"),\n  status: statusEnum(\"status\").notNull().default(\"대여가능\"),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.daouId).notNull(),\n});\n\n// Rentals table\nexport const rentals = pgTable(\"rentals\", {\n  rentalId: varchar(\"rental_id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemId: varchar(\"item_id\").references(() => items.itemId).notNull(),\n  userId: varchar(\"user_id\").references(() => users.daouId).notNull(),\n  rentalDate: timestamp(\"rental_date\"),\n  expectedReturnDate: timestamp(\"expected_return_date\").notNull(),\n  actualReturnDate: timestamp(\"actual_return_date\"),\n  status: rentalStatusEnum(\"status\").notNull().default(\"신청중\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n});\n\n// Approvals table\nexport const approvals = pgTable(\"approvals\", {\n  approvalId: varchar(\"approval_id\").primaryKey().default(sql`gen_random_uuid()`),\n  rentalId: varchar(\"rental_id\").references(() => rentals.rentalId).notNull(),\n  approverId: varchar(\"approver_id\").references(() => users.daouId).notNull(),\n  approvalDate: timestamp(\"approval_date\"),\n  approvalStatus: approvalStatusEnum(\"approval_status\").notNull().default(\"대기\"),\n  note: text(\"note\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n});\n\nexport const insertItemSchema = createInsertSchema(items).omit({\n  itemId: true,\n  createdAt: true,\n  createdBy: true,\n});\n\nexport const insertRentalSchema = createInsertSchema(rentals).omit({\n  rentalId: true,\n  rentalDate: true,\n  actualReturnDate: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertApprovalSchema = createInsertSchema(approvals).omit({\n  approvalId: true,\n  approvalDate: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertItem = z.infer<typeof insertItemSchema>;\nexport type Item = typeof items.$inferSelect;\nexport type InsertRental = z.infer<typeof insertRentalSchema>;\nexport type Rental = typeof rentals.$inferSelect;\nexport type InsertApproval = z.infer<typeof insertApprovalSchema>;\nexport type Approval = typeof approvals.$inferSelect;\n\n// Extended types for joined queries\nexport type RentalWithDetails = Rental & {\n  item: Item;\n  user: User;\n  approvals?: Approval[];\n};\n\nexport type ItemWithRentals = Item & {\n  rentals?: RentalWithDetails[];\n};","size_bytes":3927},"client/src/App.tsx":{"content":"import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { queryClient } from \"./lib/queryClient\";\nimport AppLayout from \"./components/AppLayout\";\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppLayout />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":418},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Force logo sizing with highest specificity to override all other styles */\n.force-logo-40.force-logo-40.force-logo-40 {\n  width: 40px !important;\n  height: 40px !important;\n  min-width: 40px !important;\n  min-height: 40px !important;\n  max-width: 40px !important;\n  max-height: 40px !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n\n.force-logo-32.force-logo-32.force-logo-32 {\n  width: 32px !important;\n  height: 32px !important;\n  min-width: 32px !important;\n  min-height: 32px !important;\n  max-width: 32px !important;\n  max-height: 32px !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n\n.force-logo-text-40.force-logo-text-40.force-logo-text-40 {\n  font-size: 24px !important;\n  line-height: 40px !important;\n  font-weight: 900 !important;\n  width: 40px !important;\n  height: 40px !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n\n.force-logo-text-32.force-logo-text-32.force-logo-text-32 {\n  font-size: 19.2px !important;\n  line-height: 32px !important;\n  font-weight: 900 !important;\n  width: 32px !important;\n  height: 32px !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n\n.force-header-text.force-header-text.force-header-text {\n  height: 40px !important;\n  line-height: 40px !important;\n  font-size: 24px !important;\n}\n\n/* Header logo styling - RESPONSIVE SIZE */\n.header-logo {\n  flex-shrink: 0;\n}\n\n/* Login logo styling */\n.login-logo {\n  height: 120px !important;\n  width: auto !important;\n  image-rendering: crisp-edges;\n}\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 13%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 13%;\n\n  --card-border: 0 0% 92%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 13%;\n\n  --sidebar-border: 0 0% 90%;\n\n  --sidebar-primary: 210 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 93%;\n\n  --sidebar-accent-foreground: 0 0% 13%;\n\n  --sidebar-ring: 210 100% 50%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 13%;\n\n  --popover-border: 0 0% 90%;\n\n  --primary: 210 100% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 0 0% 13%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 0 0% 46%;\n\n  --accent: 210 15% 95%;\n\n  --accent-foreground: 0 0% 13%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 85%;\n  --ring: 210 100% 50%;\n  --chart-1: 210 100% 50%;\n  --chart-2: 120 60% 45%;\n  --chart-3: 45 90% 55%;\n  --chart-4: 0 75% 55%;\n  --chart-5: 200 80% 50%;\n\n  --font-sans: Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.10), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 9%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 13% 18%;\n\n  --card: 220 13% 13%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 13% 20%;\n\n  --sidebar: 220 13% 11%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 13% 16%;\n\n  --sidebar-primary: 210 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 13% 15%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 210 100% 50%;\n\n  --popover: 220 13% 15%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 13% 22%;\n\n  --primary: 210 100% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 13% 17%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 13% 15%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 220 13% 16%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 220 13% 25%;\n  --ring: 210 100% 50%;\n  --chart-1: 210 100% 65%;\n  --chart-2: 120 60% 65%;\n  --chart-3: 45 90% 70%;\n  --chart-4: 0 75% 70%;\n  --chart-5: 200 80% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.25);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.35), 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.40), 0px 4px 6px -2px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.36);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.40), 0px 4px 6px -2px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.40), 0px 10px 10px -5px hsl(0 0% 0% / 0.34);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11584},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppLayout.tsx":{"content":"import { useState } from \"react\";\nimport { Route, Switch, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport LoginForm from \"./LoginForm\";\nimport Header from \"./Header\";\nimport AppSidebar from \"./Sidebar\";\nimport Dashboard from \"./Dashboard\";\nimport ItemManagement from \"./ItemManagement\";\nimport RentalRequest from \"./RentalRequest\";\nimport RentalList from \"./RentalList\";\nimport SystemSettings from \"./SystemSettings\";\nimport type { RentalWithDetails, Item, InsertItem } from \"@shared/schema\";\n\ninterface User {\n  daouId: string;\n  name: string;\n  department: string;\n  role: string;\n}\n\nexport default function AppLayout() {\n  const [user, setUser] = useState<User | null>(null);\n  const [location] = useLocation();\n\n  const { toast } = useToast();\n\n  // Fetch all items\n  const { data: allItems = [] } = useQuery<Item[]>({\n    queryKey: [\"/api/items\"],\n    enabled: !!user\n  });\n\n  // Fetch available items for rental request\n  const { data: availableItems = [] } = useQuery<Item[]>({\n    queryKey: [\"/api/items/available\"],\n    enabled: !!user\n  });\n\n  // Fetch all rental data\n  const { data: allRentals = [] } = useQuery<RentalWithDetails[]>({\n    queryKey: [\"/api/rentals\"],\n    enabled: !!user\n  });\n\n  // Fetch user-specific rental data\n  const { data: userRentals = [] } = useQuery<RentalWithDetails[]>({\n    queryKey: [\"/api/rentals/user\", user?.daouId],\n    enabled: !!user?.daouId\n  });\n\n  const handleLogin = (daouId: string, name: string, department: string) => {\n    const role = department === \"상품운용팀\" ? \"admin\" : \"user\";\n    setUser({ daouId, name, department, role });\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n  };\n\n  // Item management mutations\n  const addItemMutation = useMutation({\n    mutationFn: async (item: Omit<InsertItem, 'createdBy'>) => {\n      const response = await apiRequest('POST', '/api/items', item);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items/available\"] });\n      toast({ title: \"물품이 성공적으로 등록되었습니다.\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"물품 등록 실패\", \n        description: error.message || \"물품 등록 중 오류가 발생했습니다.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async ({ itemId, updates }: { itemId: string; updates: Partial<Item> }) => {\n      const response = await apiRequest('PUT', `/api/items/${itemId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items/available\"] });\n      toast({ title: \"물품 정보가 성공적으로 수정되었습니다.\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"물품 수정 실패\", \n        description: error.message || \"물품 수정 중 오류가 발생했습니다.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      await apiRequest('DELETE', `/api/items/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/items/available\"] });\n      toast({ title: \"물품이 성공적으로 삭제되었습니다.\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"물품 삭제 실패\", \n        description: error.message || \"물품 삭제 중 오류가 발생했습니다.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Rental request mutation\n  const submitRentalMutation = useMutation({\n    mutationFn: async (request: { itemId: string; expectedReturnDate: Date; userId: string }) => {\n      const response = await apiRequest('POST', '/api/rentals', request);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rentals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rentals/user\", user?.daouId] });\n      toast({ title: \"대여 신청이 성공적으로 제출되었습니다.\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"대여 신청 실패\", \n        description: error.message || \"대여 신청 중 오류가 발생했습니다.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Rental status update mutation\n  const updateRentalStatusMutation = useMutation({\n    mutationFn: async ({ rentalId, status }: { rentalId: string; status: string }) => {\n      const response = await apiRequest('PUT', `/api/rentals/${rentalId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rentals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rentals/user\", user?.daouId] });\n      toast({ title: \"대여 상태가 성공적으로 업데이트되었습니다.\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"상태 업데이트 실패\", \n        description: error.message || \"상태 업데이트 중 오류가 발생했습니다.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Handler functions\n  const handleAddItem = (item: Partial<Item>) => {\n    addItemMutation.mutate(item as Omit<InsertItem, 'createdBy'>);\n  };\n\n  const handleUpdateItem = (itemId: string, updates: Partial<Item>) => {\n    updateItemMutation.mutate({ itemId, updates });\n  };\n\n  const handleDeleteItem = (itemId: string) => {\n    deleteItemMutation.mutate(itemId);\n  };\n\n  const handleSubmitRequest = (request: { itemId: string; expectedReturnDate: Date }) => {\n    if (!user?.daouId) {\n      toast({ title: \"로그인이 필요합니다.\", variant: \"destructive\" });\n      return;\n    }\n    submitRentalMutation.mutate({ ...request, userId: user.daouId });\n  };\n\n  const handleUpdateRentalStatus = (rentalId: string, status: string) => {\n    updateRentalStatusMutation.mutate({ rentalId, status });\n  };\n\n\n  const dashboardStats = {\n    totalItems: allItems.length,\n    availableItems: availableItems.length,\n    myActiveRentals: userRentals.filter(r => [\"승인\", \"대여중\"].includes(r.status)).length,\n    pendingApprovals: allRentals.filter(r => r.status === \"신청중\").length,\n    overdueRentals: allRentals.filter(r => \n      r.status === \"대여중\" && new Date() > r.expectedReturnDate\n    ).length,\n  };\n\n  if (!user) {\n    return <LoginForm onLogin={handleLogin} />;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar userRole={user.role} />\n        <div className=\"flex flex-col flex-1\">\n          <Header user={user} onLogout={handleLogout} />\n          <main className=\"flex-1 overflow-hidden\">\n            <div className=\"h-full overflow-y-auto p-6\">\n              <Switch>\n                <Route path=\"/dashboard\">\n                  <Dashboard stats={dashboardStats} userRole={user.role} />\n                </Route>\n                \n                <Route path=\"/rental-request\">\n                  <RentalRequest \n                    availableItems={availableItems}\n                    onSubmitRequest={handleSubmitRequest}\n                  />\n                </Route>\n                \n                <Route path=\"/my-rentals\">\n                  <RentalList \n                    rentals={userRentals}\n                    showAllUsers={false}\n                  />\n                </Route>\n                \n                <Route path=\"/all-rentals\">\n                  <RentalList \n                    rentals={allRentals}\n                    showAllUsers={true}\n                    onUpdateStatus={user.role === \"admin\" ? handleUpdateRentalStatus : undefined}\n                  />\n                </Route>\n                \n                {user.role === \"admin\" && (\n                  <Route path=\"/items\">\n                    <ItemManagement \n                      items={allItems}\n                      onAddItem={handleAddItem}\n                      onUpdateItem={handleUpdateItem}\n                      onDeleteItem={handleDeleteItem}\n                    />\n                  </Route>\n                )}\n                \n                {user.role === \"admin\" && (\n                  <Route path=\"/approvals\">\n                    <RentalList \n                      rentals={allRentals.filter(r => r.status === \"신청중\")}\n                      showAllUsers={true}\n                      onUpdateStatus={handleUpdateRentalStatus}\n                    />\n                  </Route>\n                )}\n                \n                {user.role === \"admin\" && (\n                  <Route path=\"/users\">\n                    <div className=\"space-y-6\">\n                      <h2 className=\"text-2xl font-semibold\">사용자 관리</h2>\n                      <p className=\"text-muted-foreground\">사용자 관리 기능은 개발 중입니다.</p>\n                    </div>\n                  </Route>\n                )}\n                \n                {user.role === \"admin\" && (\n                  <Route path=\"/settings\">\n                    <SystemSettings />\n                  </Route>\n                )}\n                \n                <Route>\n                  <Dashboard stats={dashboardStats} userRole={user.role} />\n                </Route>\n              </Switch>\n            </div>\n          </main>\n        </div>\n      </div>\n      <Toaster />\n    </SidebarProvider>\n  );\n}","size_bytes":10008},"client/src/components/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package, ClipboardList, Clock, AlertTriangle } from \"lucide-react\";\n\ninterface DashboardStats {\n  totalItems: number;\n  availableItems: number;\n  myActiveRentals: number;\n  pendingApprovals: number;\n  overdueRentals: number;\n}\n\ninterface DashboardProps {\n  stats: DashboardStats;\n  userRole: string;\n}\n\nexport default function Dashboard({ stats, userRole }: DashboardProps) {\n  const isAdmin = userRole === 'admin';\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-semibold\">대시보드</h2>\n        <p className=\"text-muted-foreground\">IT 장비 대여 현황 개요</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">전체 물품</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-items\">\n              {stats.totalItems}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              사용가능: {stats.availableItems}개\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">내 대여 현황</CardTitle>\n            <ClipboardList className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-my-rentals\">\n              {stats.myActiveRentals}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              활성 대여 건\n            </p>\n          </CardContent>\n        </Card>\n\n        {isAdmin && (\n          <>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">승인 대기</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-pending-approvals\">\n                  {stats.pendingApprovals}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  승인 필요\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">연체 현황</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-destructive\" data-testid=\"stat-overdue-rentals\">\n                  {stats.overdueRentals}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  반납 연체\n                </p>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>최근 대여 내역</CardTitle>\n            <CardDescription>최근 5건의 대여 기록</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* //todo: remove mock functionality */}\n            <div className=\"space-y-3\">\n              {[\n                { item: \"HUAWEI AR6120\", status: \"대여중\", date: \"2024-01-15\" },\n                { item: \"LC-LC 광점퍼코드\", status: \"반납완료\", date: \"2024-01-14\" },\n                { item: \"Cisco Switch 2960\", status: \"승인\", date: \"2024-01-13\" },\n              ].map((rental, index) => (\n                <div key={index} className=\"flex items-center justify-between py-2 border-b last:border-0\">\n                  <div>\n                    <p className=\"font-medium\">{rental.item}</p>\n                    <p className=\"text-sm text-muted-foreground\">{rental.date}</p>\n                  </div>\n                  <Badge \n                    variant={rental.status === \"대여중\" ? \"default\" : \n                            rental.status === \"반납완료\" ? \"secondary\" : \"outline\"}\n                    data-testid={`badge-status-${index}`}\n                  >\n                    {rental.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>카테고리별 현황</CardTitle>\n            <CardDescription>물품 카테고리별 분포</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* //todo: remove mock functionality */}\n            <div className=\"space-y-3\">\n              {[\n                { category: \"라우터\", total: 15, available: 8 },\n                { category: \"스위치\", total: 22, available: 12 },\n                { category: \"무선 제품군\", total: 18, available: 9 },\n                { category: \"트랜시버\", total: 35, available: 20 },\n                { category: \"소모품류\", total: 45, available: 30 },\n              ].map((cat, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">{cat.category}</span>\n                  <div className=\"text-right\">\n                    <span className=\"text-sm font-medium\">{cat.available}/{cat.total}</span>\n                    <div className=\"w-20 h-2 bg-muted rounded-full overflow-hidden\">\n                      <div \n                        className=\"h-full bg-primary rounded-full transition-all\"\n                        style={{ width: `${(cat.available / cat.total) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6357},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Bell, LogOut } from \"lucide-react\";\nimport PNDLogo from \"./PNDLogo\";\n\ninterface HeaderProps {\n  user: {\n    name: string;\n    department: string;\n    role: string;\n  };\n  onLogout: () => void;\n}\n\nexport default function Header({ user, onLogout }: HeaderProps) {\n  const isAdmin = user.role === 'admin';\n\n  return (\n    <header className=\"flex items-center justify-between p-4 border-b bg-card\">\n      <div className=\"flex items-center gap-4\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n        <div className=\"flex items-center gap-4\">\n          <div className=\"hidden sm:block header-logo\">\n            <PNDLogo size={100} />\n          </div>\n          <div className=\"block sm:hidden header-logo\">\n            <PNDLogo size={80} />\n          </div>\n          <h1 className=\"font-medium force-header-text flex items-center\">IT Equipment Rental</h1>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-4\">\n        <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-notifications\">\n          <Bell className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"flex items-center gap-3\">\n          <div className=\"text-right\">\n            <p className=\"text-sm font-medium\" data-testid=\"text-username\">{user.name}</p>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant={isAdmin ? \"default\" : \"secondary\"} data-testid=\"badge-role\">\n                {isAdmin ? \"관리자\" : \"사용자\"}\n              </Badge>\n              <span className=\"text-xs text-muted-foreground\">{user.department}</span>\n            </div>\n          </div>\n          <Avatar>\n            <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <Button \n            size=\"icon\" \n            variant=\"ghost\" \n            onClick={onLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2225},"client/src/components/ItemManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Package } from \"lucide-react\";\n\ninterface Item {\n  itemId: string;\n  category: string;\n  name: string;\n  model?: string;\n  serialNumber?: string;\n  status: string;\n  note?: string;\n}\n\ninterface ItemManagementProps {\n  items: Item[];\n  onAddItem: (item: Partial<Item>) => void;\n  onUpdateItem: (itemId: string, updates: Partial<Item>) => void;\n  onDeleteItem: (itemId: string) => void;\n}\n\nexport default function ItemManagement({ items, onAddItem, onUpdateItem, onDeleteItem }: ItemManagementProps) {\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [editingItem, setEditingItem] = useState<Item | null>(null);\n  const [filterCategory, setFilterCategory] = useState<string>(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  const [formData, setFormData] = useState({\n    category: undefined as string | undefined,\n    name: \"\",\n    model: \"\",\n    serialNumber: \"\",\n    status: \"대여가능\",\n    note: \"\",\n  });\n\n  const categories = [\"라우터\", \"스위치\", \"무선 제품군\", \"트랜시버\", \"소모품류\"].filter(c => c && c.trim() !== '');\n  const statuses = [\"대여가능\", \"대여불가\"].filter(s => s && s.trim() !== '');\n\n  const filteredItems = items.filter(item => {\n    const matchesCategory = !filterCategory || item.category === filterCategory;\n    const matchesSearch = !searchTerm || \n      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.model?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingItem) {\n      onUpdateItem(editingItem.itemId, formData);\n      setEditingItem(null);\n    } else {\n      onAddItem(formData);\n      setShowAddDialog(false);\n    }\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      category: undefined as string | undefined,\n      name: \"\",\n      model: \"\",\n      serialNumber: \"\",\n      status: \"대여가능\",\n      note: \"\",\n    });\n  };\n\n  const handleEdit = (item: Item) => {\n    setEditingItem(item);\n    setFormData({\n      category: item.category,\n      name: item.name,\n      model: item.model || \"\",\n      serialNumber: item.serialNumber || \"\",\n      status: item.status,\n      note: item.note || \"\",\n    });\n  };\n\n  const isSerialRequired = formData.category && formData.category !== \"소모품류\";\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">물품 관리</h2>\n          <p className=\"text-muted-foreground\">IT 장비 등록 및 관리</p>\n        </div>\n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-item\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              물품 등록\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <form onSubmit={handleSubmit}>\n              <DialogHeader>\n                <DialogTitle>새 물품 등록</DialogTitle>\n                <DialogDescription>새로운 IT 장비를 시스템에 등록합니다.</DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">카테고리 *</Label>\n                  <Select \n                    value={formData.category || \"\"} \n                    onValueChange={(value) => setFormData({...formData, category: value})}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"카테고리 선택\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.filter(cat => cat && cat.trim() !== '').map((cat) => (\n                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">품명 *</Label>\n                  <Input\n                    id=\"name\"\n                    data-testid=\"input-name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({...formData, name: e.target.value})}\n                    placeholder=\"예: HUAWEI AR6120\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"model\">모델번호</Label>\n                  <Input\n                    id=\"model\"\n                    data-testid=\"input-model\"\n                    value={formData.model}\n                    onChange={(e) => setFormData({...formData, model: e.target.value})}\n                    placeholder=\"모델번호 입력\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serialNumber\">\n                    시리얼넘버 {isSerialRequired && \"*\"}\n                  </Label>\n                  <Input\n                    id=\"serialNumber\"\n                    data-testid=\"input-serial\"\n                    value={formData.serialNumber}\n                    onChange={(e) => setFormData({...formData, serialNumber: e.target.value})}\n                    placeholder={isSerialRequired ? \"시리얼넘버 입력 (필수)\" : \"시리얼넘버 입력 (선택)\"}\n                    required={!!isSerialRequired}\n                  />\n                  {formData.category === \"소모품류\" && (\n                    <p className=\"text-xs text-muted-foreground\">소모품류는 시리얼넘버가 필요하지 않습니다.</p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">상태</Label>\n                  <Select \n                    value={formData.status} \n                    onValueChange={(value) => setFormData({...formData, status: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {statuses.filter(status => status && status.trim() !== '').map((status) => (\n                        <SelectItem key={status} value={status}>{status}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"note\">비고</Label>\n                  <Textarea\n                    id=\"note\"\n                    data-testid=\"input-note\"\n                    value={formData.note}\n                    onChange={(e) => setFormData({...formData, note: e.target.value})}\n                    placeholder=\"추가 정보나 특이사항 입력\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                  취소\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-submit-item\">\n                  등록\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            물품 목록\n          </CardTitle>\n          <CardDescription>등록된 IT 장비 목록을 확인하고 관리할 수 있습니다.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"물품명, 모델, 시리얼 검색...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={filterCategory} onValueChange={setFilterCategory}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-category\">\n                <SelectValue placeholder=\"전체 카테고리\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">전체 카테고리</SelectItem>\n                {categories.map((cat) => (\n                  <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>카테고리</TableHead>\n                  <TableHead>품명</TableHead>\n                  <TableHead>모델</TableHead>\n                  <TableHead>시리얼넘버</TableHead>\n                  <TableHead>상태</TableHead>\n                  <TableHead>비고</TableHead>\n                  <TableHead className=\"text-right\">작업</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredItems.map((item) => (\n                  <TableRow key={item.itemId}>\n                    <TableCell>\n                      <Badge variant=\"outline\">{item.category}</Badge>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{item.name}</TableCell>\n                    <TableCell>{item.model || \"-\"}</TableCell>\n                    <TableCell>{item.serialNumber || \"-\"}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={item.status === \"대여가능\" ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${item.itemId}`}\n                      >\n                        {item.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{item.note || \"-\"}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => handleEdit(item)}\n                          data-testid={`button-edit-${item.itemId}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => onDeleteItem(item.itemId)}\n                          data-testid={`button-delete-${item.itemId}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingItem} onOpenChange={(open) => !open && setEditingItem(null)}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <form onSubmit={handleSubmit}>\n            <DialogHeader>\n              <DialogTitle>물품 수정</DialogTitle>\n              <DialogDescription>물품 정보를 수정합니다.</DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              {/* Same form fields as add dialog */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-category\">카테고리 *</Label>\n                <Select \n                  value={formData.category} \n                  onValueChange={(value) => setFormData({...formData, category: value})}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"카테고리 선택\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((cat) => (\n                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">품명 *</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"예: HUAWEI AR6120\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-model\">모델번호</Label>\n                <Input\n                  id=\"edit-model\"\n                  value={formData.model}\n                  onChange={(e) => setFormData({...formData, model: e.target.value})}\n                  placeholder=\"모델번호 입력\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-serialNumber\">\n                  시리얼넘버 {isSerialRequired && \"*\"}\n                </Label>\n                <Input\n                  id=\"edit-serialNumber\"\n                  value={formData.serialNumber}\n                  onChange={(e) => setFormData({...formData, serialNumber: e.target.value})}\n                  placeholder={isSerialRequired ? \"시리얼넘버 입력 (필수)\" : \"시리얼넘버 입력 (선택)\"}\n                  required={!!isSerialRequired}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-status\">상태</Label>\n                <Select \n                  value={formData.status} \n                  onValueChange={(value) => setFormData({...formData, status: value})}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {statuses.map((status) => (\n                      <SelectItem key={status} value={status}>{status}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-note\">비고</Label>\n                <Textarea\n                  id=\"edit-note\"\n                  value={formData.note}\n                  onChange={(e) => setFormData({...formData, note: e.target.value})}\n                  placeholder=\"추가 정보나 특이사항 입력\"\n                  rows={3}\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditingItem(null)}>\n                취소\n              </Button>\n              <Button type=\"submit\">\n                수정\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16332},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User, Lock, Eye, EyeOff } from \"lucide-react\";\nimport PNDLogo from \"./PNDLogo\";\nimport { SimpleLogger } from \"../utils/simpleLogger\";\n\ninterface LoginFormProps {\n  onLogin: (daouId: string, name: string, department: string) => void;\n}\n\nexport default function LoginForm({ onLogin }: LoginFormProps) {\n  const [daouId, setDaouId] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [department, setDepartment] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Default admin password (in real app, this would be stored securely on backend)\n  const ADMIN_PASSWORD = localStorage.getItem('admin-password') || \"Huawei@123\";\n  \n  // Check if current department requires password\n  const requiresPassword = department === \"상품운용팀\";\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n    \n    try {\n      // Basic validation\n      if (!daouId || !name || !department) {\n        setError(\"모든 필수 필드를 입력해주세요.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      // Password validation for admin department\n      if (requiresPassword) {\n        if (!password) {\n          setError(\"패스워드를 입력해주세요.\");\n          setIsLoading(false);\n          return;\n        }\n        \n        if (password !== ADMIN_PASSWORD) {\n          setError(\"패스워드가 올바르지 않습니다.\");\n          setIsLoading(false);\n          return;\n        }\n      }\n      \n      // Record successful login and get role\n      const role = requiresPassword ? 'admin' : 'user';\n      SimpleLogger.recordLogin(daouId, name, department, role);\n      \n      onLogin(daouId, name, department);\n    } catch (error) {\n      console.error('Login error:', error);\n      setError('로그인 처리 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleDepartmentChange = (value: string) => {\n    setDepartment(value);\n    setPassword(\"\"); // Clear password when department changes\n    setError(\"\"); // Clear any errors\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"hidden sm:block login-logo\">\n              <PNDLogo size={120} className=\"transform hover:scale-105 transition-transform duration-200\" />\n            </div>\n            <div className=\"block sm:hidden login-logo\">\n              <PNDLogo size={100} className=\"transform hover:scale-105 transition-transform duration-200\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl mb-2\">(주)피앤디아이앤씨</CardTitle>\n          <CardDescription className=\"mb-6\">IT Equipment Rental Management System</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"daou-id\">다우오피스 ID</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"daou-id\"\n                  data-testid=\"input-daou-id\"\n                  type=\"text\"\n                  placeholder=\"이메일의 @ 앞부분 입력\"\n                  value={daouId}\n                  onChange={(e) => setDaouId(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">이름</Label>\n              <Input\n                id=\"name\"\n                data-testid=\"input-name\"\n                type=\"text\"\n                placeholder=\"성명 입력\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"department\">부서</Label>\n              <Select value={department} onValueChange={handleDepartmentChange} required>\n                <SelectTrigger data-testid=\"select-department\">\n                  <SelectValue placeholder=\"부서 선택\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"상품운용팀\">상품운용팀</SelectItem>\n                  <SelectItem value=\"전략사업본부\">전략사업본부</SelectItem>\n                  <SelectItem value=\"기술1팀\">기술1팀</SelectItem>\n                  <SelectItem value=\"기술2팀\">기술2팀</SelectItem>\n                  <SelectItem value=\"기술3팀\">기술3팀</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Conditional Password Field with Animation */}\n            {requiresPassword && (\n              <div className=\"space-y-2 animate-in slide-in-from-top-2 duration-300\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    data-testid=\"input-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"패스워드를 입력하세요\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10 pr-10\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n            )}\n            \n            {/* Error Message */}\n            {error && (\n              <Alert variant=\"destructive\" className=\"animate-in slide-in-from-top-2 duration-300\">\n                <AlertDescription data-testid=\"text-error\">{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              data-testid=\"button-login\"\n              disabled={isLoading || !daouId || !name || !department || (requiresPassword && !password)}\n            >\n              {isLoading ? \"로그인 중...\" : \"로그인\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7757},"client/src/components/LogoUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, X, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PNDLogo from \"./PNDLogo\";\n\nexport default function LogoUpload() {\n  const [currentLogo, setCurrentLogo] = useState<string | null>(() => {\n    return localStorage.getItem('company-logo');\n  });\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg+xml'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"지원하지 않는 파일 형식\",\n        description: \"JPG, PNG, SVG 파일만 업로드 가능합니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"파일 크기 초과\",\n        description: \"5MB 이하의 파일만 업로드 가능합니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      \n      // For SVG files, store directly\n      if (file.type === 'image/svg+xml') {\n        localStorage.setItem('company-logo', result);\n        setCurrentLogo(result);\n        setIsUploading(false);\n        toast({\n          title: \"로고 업로드 완료\",\n          description: \"새 로고가 적용되었습니다.\",\n        });\n        return;\n      }\n\n      // For image files, resize to maintain aspect ratio with high quality\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          setIsUploading(false);\n          toast({\n            title: \"업로드 실패\",\n            description: \"이미지 처리 중 오류가 발생했습니다.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        // Calculate dimensions to maintain aspect ratio - use higher resolution for quality\n        const maxSize = 200; // Higher resolution for better quality scaling\n        const ratio = Math.min(maxSize / img.width, maxSize / img.height);\n        const width = img.width * ratio;\n        const height = img.height * ratio;\n\n        canvas.width = maxSize;\n        canvas.height = maxSize;\n        \n        // Enable high-quality image rendering\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        \n        // Clear canvas with transparent background\n        ctx.clearRect(0, 0, maxSize, maxSize);\n        \n        // Center the image\n        const x = (maxSize - width) / 2;\n        const y = (maxSize - height) / 2;\n        \n        ctx.drawImage(img, x, y, width, height);\n        \n        const resizedDataUrl = canvas.toDataURL('image/png', 1.0); // Maximum quality\n        localStorage.setItem('company-logo', resizedDataUrl);\n        setCurrentLogo(resizedDataUrl);\n        setIsUploading(false);\n        \n        toast({\n          title: \"로고 업로드 완료\",\n          description: \"새 로고가 적용되었습니다.\",\n        });\n        \n        // Trigger a custom event to notify other components\n        window.dispatchEvent(new CustomEvent('logo-updated'));\n      };\n      \n      img.src = result;\n    };\n    \n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveLogo = () => {\n    localStorage.removeItem('company-logo');\n    setCurrentLogo(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n    toast({\n      title: \"로고 제거 완료\",\n      description: \"기본 PND 로고로 복원되었습니다.\",\n    });\n    \n    // Trigger a custom event to notify other components\n    window.dispatchEvent(new CustomEvent('logo-updated'));\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>회사 로고 관리</CardTitle>\n        <CardDescription>\n          시스템 전체에 표시될 회사 로고를 설정합니다.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"flex items-center gap-6\">\n          <div className=\"text-center\">\n            <Label className=\"text-sm text-muted-foreground mb-2 block\">현재 로고</Label>\n            <PNDLogo size={60} />\n          </div>\n          \n          <div className=\"flex-1 space-y-4\">\n            <div>\n              <Label htmlFor=\"logo-upload\">로고 파일 업로드</Label>\n              <div className=\"mt-2 flex gap-2\">\n                <Input\n                  ref={fileInputRef}\n                  id=\"logo-upload\"\n                  type=\"file\"\n                  accept=\".jpg,.jpeg,.png,.svg\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"input-logo-upload\"\n                />\n                <Button \n                  onClick={handleUploadClick}\n                  disabled={isUploading}\n                  data-testid=\"button-upload-logo\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  {isUploading ? \"업로드 중...\" : \"파일 선택\"}\n                </Button>\n                \n                {currentLogo && (\n                  <Button \n                    variant=\"outline\"\n                    onClick={handleRemoveLogo}\n                    data-testid=\"button-remove-logo\"\n                  >\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    기본값 복원\n                  </Button>\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                지원 형식: JPG, PNG, SVG (최대 5MB)\n              </p>\n            </div>\n          </div>\n        </div>\n        \n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6456},"client/src/components/PNDLogo.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface PNDLogoProps {\n  size?: number;\n  className?: string;\n}\n\nexport default function PNDLogo({ size = 60, className = \"\" }: PNDLogoProps) {\n  const [logoUrl, setLogoUrl] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check if custom logo is stored in localStorage\n    const customLogo = localStorage.getItem('company-logo');\n    if (customLogo) {\n      setLogoUrl(customLogo);\n    }\n\n    // Listen for logo updates\n    const handleLogoUpdate = () => {\n      const updatedLogo = localStorage.getItem('company-logo');\n      setLogoUrl(updatedLogo);\n    };\n\n    window.addEventListener('logo-updated', handleLogoUpdate);\n    return () => window.removeEventListener('logo-updated', handleLogoUpdate);\n  }, []);\n\n  // If custom logo exists, use it with high-quality rendering\n  if (logoUrl) {\n    const isSvg = logoUrl.includes('data:image/svg') || logoUrl.includes('.svg');\n    \n    return (\n      <div \n        className={`flex items-center justify-center ${className}`}\n        style={{ \n          width: `${size}px`, \n          height: `${size}px`,\n          minWidth: `${size}px`,\n          minHeight: `${size}px`\n        }}\n      >\n        <img \n          src={logoUrl} \n          alt=\"Company Logo\" \n          className=\"object-contain\"\n          style={{ \n            width: `${size}px`, \n            height: `${size}px`,\n            maxWidth: `${size}px`, \n            maxHeight: `${size}px`,\n            imageRendering: 'crisp-edges',\n            filter: 'contrast(1.1) saturate(1.1) brightness(1.05)',\n            backgroundColor: 'transparent'\n          }}\n          loading=\"eager\"\n          decoding=\"sync\"\n        />\n      </div>\n    );\n  }\n\n  // Default PND logo with enhanced quality\n  const logoClass = size === 40 ? 'force-logo-40' : size === 32 ? 'force-logo-32' : '';\n  const textClass = size === 40 ? 'force-logo-text-40' : size === 32 ? 'force-logo-text-32' : '';\n  \n  return (\n    <div \n      className={`flex items-center justify-center rounded-full ${logoClass} ${className}`}\n      style={{ \n        width: size,\n        height: size,\n        minWidth: size,\n        minHeight: size,\n        maxWidth: size,\n        maxHeight: size,\n        backgroundColor: '#2563EB',\n        flexShrink: 0,\n        filter: 'contrast(1.1) saturate(1.2) brightness(1.05)',\n        boxShadow: size > 60 ? '0 4px 12px rgba(37, 99, 235, 0.3)' : '0 2px 6px rgba(37, 99, 235, 0.2)',\n        border: size <= 40 ? 'none' : '2px solid rgba(255, 255, 255, 0.2)',\n        boxSizing: 'border-box'\n      }}\n    >\n      <span \n        className={`font-bold select-none text-white antialiased ${textClass}`}\n        style={{ \n          textRendering: 'optimizeLegibility',\n          WebkitFontSmoothing: 'antialiased',\n          letterSpacing: '-1px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        PND\n      </span>\n    </div>\n  );\n}","size_bytes":3016},"client/src/components/RentalList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ClipboardList, Eye, Clock, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { RentalWithDetails } from \"@shared/schema\";\n\ninterface RentalListProps {\n  rentals: RentalWithDetails[];\n  showAllUsers?: boolean;\n  onUpdateStatus?: (rentalId: string, status: string) => void;\n}\n\nexport default function RentalList({ rentals, showAllUsers = false, onUpdateStatus }: RentalListProps) {\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterCategory, setFilterCategory] = useState<string>(\"all\");\n  const [selectedRental, setSelectedRental] = useState<RentalWithDetails | null>(null);\n\n  const statuses = [\"신청중\", \"승인\", \"대여중\", \"반납완료\", \"거절\"].filter(s => s && s.trim() !== '');\n  const categories = Array.from(new Set(rentals.map(rental => rental.item?.category).filter(cat => cat && cat.trim() !== '')));\n\n  const filteredRentals = rentals.filter(rental => {\n    const matchesStatus = filterStatus === \"all\" || rental.status === filterStatus;\n    const matchesCategory = filterCategory === \"all\" || rental.item?.category === filterCategory;\n    return matchesStatus && matchesCategory;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"신청중\": return <Clock className=\"h-4 w-4\" />;\n      case \"승인\": return <CheckCircle className=\"h-4 w-4\" />;\n      case \"대여중\": return <ClipboardList className=\"h-4 w-4\" />;\n      case \"반납완료\": return <CheckCircle className=\"h-4 w-4\" />;\n      case \"거절\": return <XCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case \"신청중\": return \"outline\";\n      case \"승인\": return \"default\";\n      case \"대여중\": return \"default\";\n      case \"반납완료\": return \"secondary\";\n      case \"거절\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  const isOverdue = (rental: RentalWithDetails) => {\n    if (rental.status !== \"대여중\") return false;\n    return new Date() > rental.expectedReturnDate;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-semibold\">\n          {showAllUsers ? \"전체 대여 현황\" : \"내 대여 현황\"}\n        </h2>\n        <p className=\"text-muted-foreground\">\n          {showAllUsers ? \"모든 사용자의 대여 현황을 확인할 수 있습니다\" : \"내가 신청한 대여 목록입니다\"}\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ClipboardList className=\"h-5 w-5\" />\n            대여 목록\n          </CardTitle>\n          <CardDescription>\n            총 {filteredRentals.length}건의 대여 기록\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 mb-4\">\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"전체 상태\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 상태</SelectItem>\n                {statuses.filter(status => status && status.trim() !== '').map((status) => (\n                  <SelectItem key={status} value={status}>{status}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={filterCategory} onValueChange={setFilterCategory}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-category\">\n                <SelectValue placeholder=\"전체 카테고리\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 카테고리</SelectItem>\n                {categories.filter(category => category && category.trim() !== '').map((category) => (\n                  <SelectItem key={category} value={category}>{category}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>물품명</TableHead>\n                  <TableHead>카테고리</TableHead>\n                  {showAllUsers && <TableHead>신청자</TableHead>}\n                  <TableHead>신청일</TableHead>\n                  <TableHead>반납예정일</TableHead>\n                  <TableHead>상태</TableHead>\n                  <TableHead className=\"text-right\">작업</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRentals.map((rental) => (\n                  <TableRow \n                    key={rental.rentalId}\n                    className={isOverdue(rental) ? \"bg-destructive/5\" : \"\"}\n                  >\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        {rental.item?.name || 'N/A'}\n                        {isOverdue(rental) && (\n                          <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{rental.item?.category || 'N/A'}</Badge>\n                    </TableCell>\n                    {showAllUsers && (\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{rental.user?.name || 'N/A'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{rental.user?.department || 'N/A'}</p>\n                        </div>\n                      </TableCell>\n                    )}\n                    <TableCell>\n                      {format(rental.createdAt, \"yyyy-MM-dd\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className={isOverdue(rental) ? \"text-destructive font-medium\" : \"\"}>\n                        {format(rental.expectedReturnDate, \"yyyy-MM-dd\")}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={getStatusVariant(rental.status)}\n                        className=\"flex items-center gap-1 w-fit\"\n                        data-testid={`badge-status-${rental.rentalId}`}\n                      >\n                        {getStatusIcon(rental.status)}\n                        {rental.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            size=\"icon\" \n                            variant=\"ghost\"\n                            onClick={() => setSelectedRental(rental)}\n                            data-testid={`button-view-${rental.rentalId}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>대여 상세 정보</DialogTitle>\n                            <DialogDescription>\n                              대여 #{rental.rentalId}의 상세 정보\n                            </DialogDescription>\n                          </DialogHeader>\n                          \n                          {selectedRental && (\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">물품명</p>\n                                  <p className=\"font-medium\">{selectedRental.item?.name || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">카테고리</p>\n                                  <Badge variant=\"outline\">{selectedRental.item?.category || 'N/A'}</Badge>\n                                </div>\n                              </div>\n                              \n                              {showAllUsers && (\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <p className=\"text-sm text-muted-foreground\">신청자</p>\n                                    <p className=\"font-medium\">{selectedRental.user?.name || 'N/A'}</p>\n                                  </div>\n                                  <div>\n                                    <p className=\"text-sm text-muted-foreground\">부서</p>\n                                    <p className=\"font-medium\">{selectedRental.user?.department || 'N/A'}</p>\n                                  </div>\n                                </div>\n                              )}\n                              \n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">신청일</p>\n                                  <p className=\"font-medium\">\n                                    {format(selectedRental.createdAt, \"yyyy년 MM월 dd일\")}\n                                  </p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">반납예정일</p>\n                                  <p className={`font-medium ${isOverdue(selectedRental) ? \"text-destructive\" : \"\"}`}>\n                                    {format(selectedRental.expectedReturnDate, \"yyyy년 MM월 dd일\")}\n                                    {isOverdue(selectedRental) && \" (연체)\"}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <p className=\"text-sm text-muted-foreground\">현재 상태</p>\n                                <Badge \n                                  variant={getStatusVariant(selectedRental.status)}\n                                  className=\"flex items-center gap-1 w-fit mt-1\"\n                                >\n                                  {getStatusIcon(selectedRental.status)}\n                                  {selectedRental.status}\n                                </Badge>\n                              </div>\n                              \n                              {selectedRental.actualReturnDate && (\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">실제반납일</p>\n                                  <p className=\"font-medium\">\n                                    {format(selectedRental.actualReturnDate, \"yyyy년 MM월 dd일\")}\n                                  </p>\n                                </div>\n                              )}\n                              \n                              \n                              {onUpdateStatus && selectedRental.status === \"신청중\" && (\n                                <div className=\"flex gap-2 pt-4 border-t\">\n                                  <Button\n                                    variant=\"default\"\n                                    onClick={() => onUpdateStatus(selectedRental.rentalId, \"승인\")}\n                                    data-testid=\"button-approve\"\n                                  >\n                                    승인\n                                  </Button>\n                                  <Button\n                                    variant=\"destructive\"\n                                    onClick={() => onUpdateStatus(selectedRental.rentalId, \"거절\")}\n                                    data-testid=\"button-reject\"\n                                  >\n                                    거절\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13467},"client/src/components/RentalRequest.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarIcon, Package } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\ninterface Item {\n  itemId: string;\n  category: string;\n  name: string;\n  model?: string;\n  serialNumber?: string;\n  status: string;\n}\n\ninterface RentalRequestProps {\n  availableItems: Item[];\n  onSubmitRequest: (request: any) => void;\n}\n\nexport default function RentalRequest({ availableItems, onSubmitRequest }: RentalRequestProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [selectedItem, setSelectedItem] = useState<string>(\"\");\n  const [expectedReturnDate, setExpectedReturnDate] = useState<Date>();\n  const [note, setNote] = useState(\"\");\n\n  const categories = [\"라우터\", \"스위치\", \"무선 제품군\", \"트랜시버\", \"소모품류\"];\n  const filteredItems = availableItems.filter(item => \n    !selectedCategory || item.category === selectedCategory\n  );\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedItem && expectedReturnDate) {\n      const item = availableItems.find(i => i.itemId === selectedItem);\n      onSubmitRequest({\n        itemId: selectedItem,\n        itemName: item?.name,\n        category: item?.category,\n        expectedReturnDate: expectedReturnDate.toISOString(),\n        note,\n      });\n      \n      // Reset form\n      setSelectedCategory(\"\");\n      setSelectedItem(\"\");\n      setExpectedReturnDate(undefined);\n      setNote(\"\");\n    }\n  };\n\n  const selectedItemDetails = availableItems.find(item => item.itemId === selectedItem);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-semibold\">대여 신청</h2>\n        <p className=\"text-muted-foreground\">필요한 IT 장비를 신청하세요</p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>대여 신청서</CardTitle>\n            <CardDescription>장비 선택 및 반납 예정일을 입력하세요</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">카테고리 *</Label>\n                <Select \n                  value={selectedCategory || undefined} \n                  onValueChange={(value) => {\n                    setSelectedCategory(value);\n                    setSelectedItem(\"\"); // Reset item selection when category changes\n                  }}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-request-category\">\n                    <SelectValue placeholder=\"카테고리 선택\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedCategory && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"item\">물품 선택 *</Label>\n                  <Select \n                    value={selectedItem || undefined} \n                    onValueChange={setSelectedItem}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-request-item\">\n                      <SelectValue placeholder=\"물품 선택\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredItems.filter(item => item.itemId && item.itemId.trim() !== '').map((item) => (\n                        <SelectItem key={item.itemId} value={item.itemId}>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{item.name}</span>\n                            {item.model && (\n                              <span className=\"text-muted-foreground\">({item.model})</span>\n                            )}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"return-date\">반납 예정일 *</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left font-normal\"\n                      data-testid=\"button-select-date\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {expectedReturnDate ? format(expectedReturnDate, \"yyyy년 M월 d일\") : \"날짜 선택\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={expectedReturnDate}\n                      onSelect={setExpectedReturnDate}\n                      disabled={(date) => date < new Date()}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"note\">사용 목적 / 비고</Label>\n                <Textarea\n                  id=\"note\"\n                  data-testid=\"input-request-note\"\n                  value={note}\n                  onChange={(e) => setNote(e.target.value)}\n                  placeholder=\"사용 목적이나 특별한 요청사항을 입력하세요\"\n                  rows={4}\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                data-testid=\"button-submit-request\"\n                disabled={!selectedItem || !expectedReturnDate}\n              >\n                대여 신청\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-6\">\n          {selectedItemDetails && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  선택된 물품 정보\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">카테고리</Label>\n                    <p className=\"font-medium\">{selectedItemDetails.category}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">상태</Label>\n                    <Badge variant=\"default\" className=\"ml-2\">\n                      {selectedItemDetails.status}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">품명</Label>\n                  <p className=\"font-medium\">{selectedItemDetails.name}</p>\n                </div>\n                \n                {selectedItemDetails.model && (\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">모델번호</Label>\n                    <p className=\"font-medium\">{selectedItemDetails.model}</p>\n                  </div>\n                )}\n                \n                {selectedItemDetails.serialNumber && (\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">시리얼넘버</Label>\n                    <p className=\"font-mono text-sm\">{selectedItemDetails.serialNumber}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle>대여 승인 절차</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium flex-shrink-0\">1</div>\n                  <div>\n                    <p className=\"font-medium\">대여 신청</p>\n                    <p className=\"text-sm text-muted-foreground\">원하는 장비와 기간을 선택하여 신청</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium flex-shrink-0\">2</div>\n                  <div>\n                    <p className=\"font-medium\">관리자 승인</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      일반 장비: 관리 담당자 승인 필요<br/>\n                      소모품: 상품운용팀 승인 필요\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium flex-shrink-0\">3</div>\n                  <div>\n                    <p className=\"font-medium\">대여 완료</p>\n                    <p className=\"text-sm text-muted-foreground\">승인 후 장비 수령 및 사용</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                <p className=\"text-sm font-medium mb-1\">반납 알림</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  반납 예정일 하루 전 이메일 알림이 발송됩니다.<br/>\n                  연체 시 2일마다 반납 독촉 메일이 발송되니 주의하세요.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10940},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { \n  LayoutDashboard, \n  Package, \n  ClipboardList, \n  History, \n  Users, \n  Settings,\n  PlusCircle,\n  CheckSquare\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  userRole: string;\n}\n\nexport default function AppSidebar({ userRole }: SidebarProps) {\n  const [location] = useLocation();\n  const isAdmin = userRole === 'admin';\n\n  const mainMenuItems = [\n    {\n      title: \"대시보드\",\n      url: \"/dashboard\",\n      icon: LayoutDashboard,\n    },\n    {\n      title: \"대여 신청\",\n      url: \"/rental-request\",\n      icon: PlusCircle,\n    },\n    {\n      title: \"내 대여 현황\",\n      url: \"/my-rentals\",\n      icon: ClipboardList,\n    },\n    {\n      title: \"전체 대여 현황\",\n      url: \"/all-rentals\",\n      icon: History,\n    },\n  ];\n\n  const adminMenuItems = [\n    {\n      title: \"물품 관리\",\n      url: \"/items\",\n      icon: Package,\n    },\n    {\n      title: \"승인 처리\",\n      url: \"/approvals\",\n      icon: CheckSquare,\n    },\n    {\n      title: \"사용자 관리\",\n      url: \"/users\",\n      icon: Users,\n    },\n    {\n      title: \"시스템 설정\",\n      url: \"/settings\",\n      icon: Settings,\n    },\n  ];\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>메인 메뉴</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainMenuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                  >\n                    <Link href={item.url} data-testid={`link-${item.url.slice(1)}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        {isAdmin && (\n          <SidebarGroup>\n            <SidebarGroupLabel>관리자 메뉴</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminMenuItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={location === item.url}\n                    >\n                      <Link href={item.url} data-testid={`link-${item.url.slice(1)}`}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3062},"client/src/components/SystemSettings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Settings, Image, Mail, Users, Shield, ClipboardList } from \"lucide-react\";\nimport LogoUpload from \"./LogoUpload\";\nimport PasswordManagement from \"./PasswordManagement\";\nimport AccessLogs from \"./AccessLogs\";\n\nexport default function SystemSettings() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-semibold\">시스템 설정</h2>\n        <p className=\"text-muted-foreground\">시스템 환경 설정 및 관리 기능</p>\n      </div>\n\n      <Tabs defaultValue=\"logo\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"logo\" className=\"flex items-center gap-2\">\n            <Image className=\"h-4 w-4\" />\n            로고 설정\n          </TabsTrigger>\n          <TabsTrigger value=\"password\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            비밀번호\n          </TabsTrigger>\n          <TabsTrigger value=\"access\" className=\"flex items-center gap-2\">\n            <ClipboardList className=\"h-4 w-4\" />\n            접근 기록\n          </TabsTrigger>\n          <TabsTrigger value=\"email\" className=\"flex items-center gap-2\">\n            <Mail className=\"h-4 w-4\" />\n            이메일 설정\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            사용자 설정\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            시스템 설정\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"logo\" className=\"space-y-6\">\n          <LogoUpload />\n        </TabsContent>\n        \n        <TabsContent value=\"password\" className=\"space-y-6\">\n          <PasswordManagement />\n        </TabsContent>\n        \n        <TabsContent value=\"access\" className=\"space-y-6\">\n          <AccessLogs />\n        </TabsContent>\n        \n        <TabsContent value=\"email\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>이메일 알림 설정</CardTitle>\n              <CardDescription>\n                대여 승인, 반납 알림, 연체 독촉 등의 이메일 설정을 관리합니다.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">이메일 설정 기능은 개발 중입니다.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>사용자 권한 관리</CardTitle>\n              <CardDescription>\n                부서별 권한 설정 및 사용자 관리 기능입니다.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">관리자 권한</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• 상품운용팀</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2\">사용자 권한</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• 전략사업본부</li>\n                      <li>• 기술1팀</li>\n                      <li>• 기술2팀</li>\n                      <li>• 기술3팀</li>\n                    </ul>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground\">상세 사용자 관리 기능은 개발 중입니다.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>시스템 환경설정</CardTitle>\n              <CardDescription>\n                데이터베이스, 로그, 백업 등의 시스템 설정을 관리합니다.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">시스템 환경설정 기능은 개발 중입니다.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":4717},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\n\nexport default function DashboardExample() {\n  const mockStats = {\n    totalItems: 135,\n    availableItems: 79,\n    myActiveRentals: 3,\n    pendingApprovals: 8,\n    overdueRentals: 2,\n  };\n\n  return <Dashboard stats={mockStats} userRole=\"admin\" />;\n}","size_bytes":289},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  const mockUser = {\n    name: \"홍길동\",\n    department: \"상품운용팀\",\n    role: \"admin\"\n  };\n\n  const handleLogout = () => {\n    console.log('Logout clicked');\n  };\n\n  return <Header user={mockUser} onLogout={handleLogout} />;\n}","size_bytes":312},"client/src/components/examples/ItemManagement.tsx":{"content":"import ItemManagement from '../ItemManagement';\n\nexport default function ItemManagementExample() {\n  // //todo: remove mock functionality\n  const mockItems = [\n    {\n      itemId: \"1\",\n      category: \"Router\",\n      name: \"HUAWEI AR6120\",\n      model: \"AR6120-S\",\n      serialNumber: \"2210012345678\",\n      status: \"대여가능\",\n      note: \"신규 입고\"\n    },\n    {\n      itemId: \"2\", \n      category: \"Switch\",\n      name: \"Cisco Catalyst 2960\",\n      model: \"WS-C2960-24TT-L\",\n      serialNumber: \"FOC1234567A\",\n      status: \"대여불가\",\n      note: \"점검 중\"\n    },\n    {\n      itemId: \"3\",\n      category: \"소모품\",\n      name: \"LC-LC 광점퍼코드\",\n      model: \"3M\",\n      serialNumber: \"\",\n      status: \"대여가능\",\n      note: \"재고 20개\"\n    }\n  ];\n\n  const handleAddItem = (item: any) => {\n    console.log('Add item:', item);\n  };\n\n  const handleUpdateItem = (itemId: string, updates: any) => {\n    console.log('Update item:', itemId, updates);\n  };\n\n  const handleDeleteItem = (itemId: string) => {\n    console.log('Delete item:', itemId);\n  };\n\n  return (\n    <ItemManagement \n      items={mockItems}\n      onAddItem={handleAddItem}\n      onUpdateItem={handleUpdateItem}\n      onDeleteItem={handleDeleteItem}\n    />\n  );\n}","size_bytes":1261},"client/src/components/examples/LoginForm.tsx":{"content":"import LoginForm from '../LoginForm';\n\nexport default function LoginFormExample() {\n  const handleLogin = (daouId: string, name: string, department: string) => {\n    console.log('Login attempted:', { daouId, name, department });\n  };\n\n  return <LoginForm onLogin={handleLogin} />;\n}","size_bytes":282},"client/src/components/examples/LogoUpload.tsx":{"content":"import LogoUpload from '../LogoUpload';\n\nexport default function LogoUploadExample() {\n  return <LogoUpload />;\n}","size_bytes":113},"client/src/components/examples/PNDLogo.tsx":{"content":"import PNDLogo from '../PNDLogo';\n\nexport default function PNDLogoExample() {\n  return (\n    <div className=\"flex items-center justify-center gap-8 p-8\">\n      <div className=\"text-center\">\n        <PNDLogo size={60} />\n        <p className=\"mt-2 text-sm text-muted-foreground\">Default (60px)</p>\n      </div>\n      <div className=\"text-center\">\n        <PNDLogo size={80} />\n        <p className=\"mt-2 text-sm text-muted-foreground\">Large (80px)</p>\n      </div>\n      <div className=\"text-center\">\n        <PNDLogo size={40} />\n        <p className=\"mt-2 text-sm text-muted-foreground\">Small (40px)</p>\n      </div>\n    </div>\n  );\n}","size_bytes":635},"client/src/components/examples/RentalList.tsx":{"content":"import RentalList from '../RentalList';\n\nexport default function RentalListExample() {\n  // //todo: remove mock functionality\n  const mockRentals = [\n    {\n      rentalId: \"1\",\n      itemName: \"HUAWEI AR6120\",\n      category: \"Router\",\n      userName: \"김철수\",\n      department: \"기술본부\",\n      status: \"대여중\",\n      createdAt: new Date(2024, 0, 15),\n      expectedReturnDate: new Date(2024, 0, 25),\n      note: \"프로젝트 테스트용\"\n    },\n    {\n      rentalId: \"2\", \n      itemName: \"LC-LC 광점퍼코드\",\n      category: \"소모품\",\n      userName: \"이영희\",\n      department: \"상품운용팀\",\n      status: \"신청중\",\n      createdAt: new Date(2024, 0, 20),\n      expectedReturnDate: new Date(2024, 0, 30),\n      note: \"고객사 설치용\"\n    },\n    {\n      rentalId: \"3\",\n      itemName: \"Cisco Catalyst 2960\", \n      category: \"Switch\",\n      userName: \"박민수\",\n      department: \"기술본부\",\n      status: \"반납완료\",\n      createdAt: new Date(2024, 0, 10),\n      expectedReturnDate: new Date(2024, 0, 20),\n      actualReturnDate: new Date(2024, 0, 19),\n      note: \"네트워크 구성 테스트\"\n    },\n    {\n      rentalId: \"4\",\n      itemName: \"Cisco Aironet 2802I\",\n      category: \"Wireless\", \n      userName: \"정수진\",\n      department: \"기술본부\",\n      status: \"대여중\",\n      createdAt: new Date(2024, 0, 5),\n      expectedReturnDate: new Date(2024, 0, 15), // Overdue\n      note: \"무선 환경 테스트\"\n    }\n  ];\n\n  const handleUpdateStatus = (rentalId: string, status: string) => {\n    console.log('Update rental status:', rentalId, status);\n  };\n\n  return (\n    <RentalList \n      rentals={mockRentals}\n      showAllUsers={true}\n      onUpdateStatus={handleUpdateStatus}\n    />\n  );\n}","size_bytes":1762},"client/src/components/examples/RentalRequest.tsx":{"content":"import RentalRequest from '../RentalRequest';\n\nexport default function RentalRequestExample() {\n  // //todo: remove mock functionality\n  const mockItems = [\n    {\n      itemId: \"1\",\n      category: \"Router\",\n      name: \"HUAWEI AR6120\",\n      model: \"AR6120-S\", \n      serialNumber: \"2210012345678\",\n      status: \"대여가능\"\n    },\n    {\n      itemId: \"2\",\n      category: \"Switch\", \n      name: \"Cisco Catalyst 2960\",\n      model: \"WS-C2960-24TT-L\",\n      serialNumber: \"FOC1234567A\",\n      status: \"대여가능\"\n    },\n    {\n      itemId: \"3\",\n      category: \"소모품\",\n      name: \"LC-LC 광점퍼코드\",\n      model: \"3M\",\n      serialNumber: \"\",\n      status: \"대여가능\"\n    },\n    {\n      itemId: \"4\",\n      category: \"Wireless\",\n      name: \"Cisco Aironet 2802I\",\n      model: \"AIR-AP2802I-K9\",\n      serialNumber: \"FCW1234567B\",\n      status: \"대여가능\"\n    }\n  ];\n\n  const handleSubmitRequest = (request: any) => {\n    console.log('Rental request submitted:', request);\n  };\n\n  return (\n    <RentalRequest \n      availableItems={mockItems}\n      onSubmitRequest={handleSubmitRequest}\n    />\n  );\n}","size_bytes":1123},"client/src/components/examples/Sidebar.tsx":{"content":"import AppSidebar from '../Sidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function SidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar userRole=\"admin\" />\n        <div className=\"flex-1 p-6 bg-background\">\n          <p className=\"text-muted-foreground\">Sidebar content area</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":567},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AccessLogs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  ClipboardList, \n  Users, \n  Shield, \n  Trash2, \n  RefreshCw, \n  Download,\n  User,\n  Clock\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ko } from \"date-fns/locale\";\nimport { SimpleLogger, AccessLogEntry } from \"../utils/simpleLogger\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AccessLogs() {\n  const [logs, setLogs] = useState<AccessLogEntry[]>([]);\n  const [filteredLogs, setFilteredLogs] = useState<AccessLogEntry[]>([]);\n  const [filterRole, setFilterRole] = useState<string>(\"all\");\n  const [stats, setStats] = useState({\n    totalLogins: 0,\n    adminLogins: 0,\n    userLogins: 0,\n    todayLogins: 0\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const loadLogs = () => {\n    setIsLoading(true);\n    try {\n      const accessLogs = SimpleLogger.getAccessLogs();\n      const logStats = SimpleLogger.getStats();\n      \n      setLogs(accessLogs);\n      setStats(logStats);\n      applyFilters(accessLogs, filterRole);\n    } catch (error) {\n      console.error('Error loading access logs:', error);\n      toast({\n        title: \"로그 로딩 실패\",\n        description: \"접근 로그를 불러오는 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const applyFilters = (allLogs: AccessLogEntry[], role: string) => {\n    let filtered = allLogs;\n    \n    if (role !== \"all\") {\n      filtered = allLogs.filter(log => log.role === role);\n    }\n    \n    setFilteredLogs(filtered);\n  };\n\n  const handleFilterChange = (role: string) => {\n    setFilterRole(role);\n    applyFilters(logs, role);\n  };\n\n  const handleClearLogs = () => {\n    if (window.confirm(\"모든 접근 로그를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.\")) {\n      SimpleLogger.clearLogs();\n      setLogs([]);\n      setFilteredLogs([]);\n      setStats({ totalLogins: 0, adminLogins: 0, userLogins: 0, todayLogins: 0 });\n      \n      toast({\n        title: \"로그 삭제 완료\",\n        description: \"모든 접근 로그가 삭제되었습니다.\",\n      });\n    }\n  };\n\n  const handleExportLogs = () => {\n    try {\n      const dataStr = JSON.stringify(filteredLogs, null, 2);\n      const dataBlob = new Blob([dataStr], { type: \"application/json\" });\n      const url = URL.createObjectURL(dataBlob);\n      \n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `access_logs_${format(new Date(), \"yyyy-MM-dd_HH-mm-ss\")}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"로그 내보내기 완료\",\n        description: \"접근 로그가 JSON 파일로 저장되었습니다.\",\n      });\n    } catch (error) {\n      console.error('Error exporting logs:', error);\n      toast({\n        title: \"내보내기 실패\",\n        description: \"로그 파일 생성 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRoleIcon = (role: 'admin' | 'user') => {\n    return role === 'admin' ? \n      <Shield className=\"h-4 w-4 text-blue-600\" /> : \n      <User className=\"h-4 w-4 text-green-600\" />;\n  };\n\n  const getRoleBadgeVariant = (role: 'admin' | 'user'): \"default\" | \"secondary\" => {\n    return role === 'admin' ? \"default\" : \"secondary\";\n  };\n\n  const getRoleText = (role: 'admin' | 'user') => {\n    return role === 'admin' ? \"관리자\" : \"사용자\";\n  };\n\n  useEffect(() => {\n    loadLogs();\n    \n    // Auto-refresh every 60 seconds for simple logs\n    const interval = setInterval(loadLogs, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <ClipboardList className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">총 접속</p>\n                <p className=\"text-2xl font-semibold\">{stats.totalLogins}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                <Shield className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">관리자 접속</p>\n                <p className=\"text-2xl font-semibold\">{stats.adminLogins}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n                <Users className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">사용자 접속</p>\n                <p className=\"text-2xl font-semibold\">{stats.userLogins}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-orange-100 dark:bg-orange-900 rounded-lg\">\n                <Clock className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">오늘 접속</p>\n                <p className=\"text-2xl font-semibold\">{stats.todayLogins}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Access Logs Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ClipboardList className=\"h-5 w-5\" />\n                접근 기록\n              </CardTitle>\n              <CardDescription>\n                시스템 접근 기록 {filteredLogs.length}건\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={loadLogs}\n                disabled={isLoading}\n                data-testid=\"button-refresh-logs\"\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n                새로고침\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportLogs}\n                disabled={filteredLogs.length === 0}\n                data-testid=\"button-export-logs\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                내보내기\n              </Button>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleClearLogs}\n                disabled={logs.length === 0}\n                data-testid=\"button-clear-logs\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                전체 삭제\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-4\">\n            <Select value={filterRole} onValueChange={handleFilterChange}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-role\">\n                <SelectValue placeholder=\"전체 역할\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 역할</SelectItem>\n                <SelectItem value=\"admin\">관리자</SelectItem>\n                <SelectItem value=\"user\">사용자</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {filteredLogs.length === 0 ? (\n            <Alert>\n              <ClipboardList className=\"h-4 w-4\" />\n              <AlertDescription>\n                접근 기록이 없습니다. 사용자가 로그인하면 여기에 기록됩니다.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>접속 시간</TableHead>\n                    <TableHead>사용자 ID</TableHead>\n                    <TableHead>이름</TableHead>\n                    <TableHead>부서</TableHead>\n                    <TableHead>역할</TableHead>\n                    <TableHead>세션 ID</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLogs.map((log) => (\n                    <TableRow key={log.id}>\n                      <TableCell className=\"font-mono text-sm\">\n                        {format(log.timestamp, \"yyyy-MM-dd HH:mm:ss\", { locale: ko })}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {log.daouId}\n                      </TableCell>\n                      <TableCell>\n                        {log.name}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {log.department}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={getRoleBadgeVariant(log.role)}\n                          className=\"flex items-center gap-1 w-fit\"\n                          data-testid={`badge-role-${log.id}`}\n                        >\n                          {getRoleIcon(log.role)}\n                          {getRoleText(log.role)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                        {log.sessionId}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Simple Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>시스템 정보</CardTitle>\n          <CardDescription>\n            접근 기록 관리 및 시스템 운영 정보\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">접근 기록</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• 성공한 로그인만 기록</li>\n                <li>• 접속 시간 및 사용자 정보</li>\n                <li>• 관리자/사용자 구분</li>\n                <li>• 세션 ID로 추적 가능</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">데이터 관리</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• 최대 보관 건수: 500건</li>\n                <li>• 자동 정리: 오래된 기록 삭제</li>\n                <li>• 로컬 저장소 사용</li>\n                <li>• JSON 형식 내보내기 가능</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12576},"client/src/components/PasswordManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Lock, Eye, EyeOff, Shield, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PasswordManagement() {\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isUpdating, setIsUpdating] = useState(false);\n  const { toast } = useToast();\n\n  // Default admin password (in real app, this would come from secure storage)\n  const ADMIN_PASSWORD = \"Huawei@123\";\n\n  const validatePassword = (password: string): string[] => {\n    const errors: string[] = [];\n    if (password.length < 8) {\n      errors.push(\"비밀번호는 최소 8자 이상이어야 합니다\");\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push(\"대문자가 포함되어야 합니다\");\n    }\n    if (!/[a-z]/.test(password)) {\n      errors.push(\"소문자가 포함되어야 합니다\");\n    }\n    if (!/[0-9]/.test(password)) {\n      errors.push(\"숫자가 포함되어야 합니다\");\n    }\n    if (!/[!@#$%^&*(),.?\\\":{}|<>]/.test(password)) {\n      errors.push(\"특수문자가 포함되어야 합니다\");\n    }\n    return errors;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsUpdating(true);\n\n    // Validate current password\n    if (currentPassword !== ADMIN_PASSWORD) {\n      setError(\"현재 비밀번호가 올바르지 않습니다.\");\n      setIsUpdating(false);\n      return;\n    }\n\n    // Validate new password\n    const passwordErrors = validatePassword(newPassword);\n    if (passwordErrors.length > 0) {\n      setError(passwordErrors.join(\", \"));\n      setIsUpdating(false);\n      return;\n    }\n\n    // Check password confirmation\n    if (newPassword !== confirmPassword) {\n      setError(\"새 비밀번호와 확인 비밀번호가 일치하지 않습니다.\");\n      setIsUpdating(false);\n      return;\n    }\n\n    // Check if new password is different\n    if (newPassword === currentPassword) {\n      setError(\"새 비밀번호는 현재 비밀번호와 달라야 합니다.\");\n      setIsUpdating(false);\n      return;\n    }\n\n    // Simulate password update (in real app, this would call an API)\n    setTimeout(() => {\n      // In a real application, you would save this to a secure backend\n      localStorage.setItem('admin-password', newPassword);\n      \n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n      setIsUpdating(false);\n      \n      toast({\n        title: \"비밀번호 변경 완료\",\n        description: \"관리자 비밀번호가 성공적으로 변경되었습니다.\",\n      });\n    }, 1000);\n  };\n\n  const resetToDefault = () => {\n    localStorage.removeItem('admin-password');\n    toast({\n      title: \"기본 비밀번호 복원\",\n      description: \"관리자 비밀번호가 기본값으로 복원되었습니다.\",\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Shield className=\"h-5 w-5\" />\n          관리자 비밀번호 관리\n        </CardTitle>\n        <CardDescription>\n          상품운용팀 로그인에 사용되는 관리자 비밀번호를 변경할 수 있습니다.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>보안 주의사항:</strong> 비밀번호는 정기적으로 변경하고, 다른 사람과 공유하지 마세요.\n          </AlertDescription>\n        </Alert>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Current Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"current-password\">현재 비밀번호</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"current-password\"\n                data-testid=\"input-current-password\"\n                type={showCurrentPassword ? \"text\" : \"password\"}\n                placeholder=\"현재 비밀번호를 입력하세요\"\n                value={currentPassword}\n                onChange={(e) => setCurrentPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                data-testid=\"button-toggle-current-password\"\n              >\n                {showCurrentPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* New Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"new-password\">새 비밀번호</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"new-password\"\n                data-testid=\"input-new-password\"\n                type={showNewPassword ? \"text\" : \"password\"}\n                placeholder=\"새 비밀번호를 입력하세요\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowNewPassword(!showNewPassword)}\n                data-testid=\"button-toggle-new-password\"\n              >\n                {showNewPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Confirm Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirm-password\">새 비밀번호 확인</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"confirm-password\"\n                data-testid=\"input-confirm-password\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                placeholder=\"새 비밀번호를 다시 입력하세요\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                data-testid=\"button-toggle-confirm-password\"\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <Alert variant=\"destructive\" className=\"animate-in slide-in-from-top-2 duration-300\">\n              <AlertDescription data-testid=\"text-password-error\">{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Submit Button */}\n          <div className=\"flex gap-2\">\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={isUpdating || !currentPassword || !newPassword || !confirmPassword}\n              data-testid=\"button-change-password\"\n            >\n              {isUpdating ? \"변경 중...\" : \"비밀번호 변경\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={resetToDefault}\n              data-testid=\"button-reset-password\"\n            >\n              기본값 복원\n            </Button>\n          </div>\n        </form>\n\n        {/* Password Requirements */}\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <h4 className=\"font-medium mb-2\">비밀번호 요구사항</h4>\n          <ul className=\"text-sm text-muted-foreground space-y-1\">\n            <li>• 최소 8자 이상</li>\n            <li>• 대문자, 소문자, 숫자, 특수문자 각각 1개 이상 포함</li>\n            <li>• 현재 비밀번호와 달라야 함</li>\n            <li>• 예시: MyPassword123!</li>\n          </ul>\n        </div>\n\n        {/* Current Status */}\n        <div className=\"p-4 border rounded-lg\">\n          <h4 className=\"font-medium mb-2\">현재 설정</h4>\n          <div className=\"text-sm text-muted-foreground\">\n            <p>• 기본 관리자 비밀번호: Huawei@123</p>\n            <p>• 상품운용팀 로그인 시 비밀번호 입력 필수</p>\n            <p>• 다른 부서는 비밀번호 입력 불필요</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10228},"client/src/utils/simpleLogger.ts":{"content":"export interface AccessLogEntry {\n  id: string;\n  timestamp: Date;\n  daouId: string;\n  name: string;\n  department: string;\n  role: 'admin' | 'user';\n  sessionId: string;\n}\n\nexport class SimpleLogger {\n  private static readonly STORAGE_KEY = 'access_logs';\n  private static readonly MAX_LOG_ENTRIES = 500; // Keep last 500 entries\n\n  /**\n   * Generate unique session ID\n   */\n  private static generateSessionId(): string {\n    return 'sess_' + Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  /**\n   * Record a successful login\n   */\n  public static recordLogin(\n    daouId: string,\n    name: string,\n    department: string,\n    role: 'admin' | 'user'\n  ): string {\n    const sessionId = this.generateSessionId();\n    \n    const entry: AccessLogEntry = {\n      id: sessionId,\n      timestamp: new Date(),\n      daouId,\n      name,\n      department,\n      role,\n      sessionId\n    };\n\n    try {\n      const logs = this.getAccessLogs();\n      logs.unshift(entry); // Add to beginning for chronological order\n\n      // Keep only the last MAX_LOG_ENTRIES\n      if (logs.length > this.MAX_LOG_ENTRIES) {\n        logs.splice(this.MAX_LOG_ENTRIES);\n      }\n\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(logs));\n    } catch (error) {\n      console.error('Error recording login:', error);\n    }\n\n    return sessionId;\n  }\n\n  /**\n   * Get all access logs\n   */\n  public static getAccessLogs(): AccessLogEntry[] {\n    try {\n      const logs = localStorage.getItem(this.STORAGE_KEY);\n      return logs ? JSON.parse(logs).map((log: any) => ({\n        ...log,\n        timestamp: new Date(log.timestamp)\n      })) : [];\n    } catch (error) {\n      console.error('Error reading access logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get filtered access logs\n   */\n  public static getFilteredLogs(\n    limit?: number,\n    role?: 'admin' | 'user',\n    startDate?: Date,\n    endDate?: Date\n  ): AccessLogEntry[] {\n    let logs = this.getAccessLogs();\n\n    // Filter by role\n    if (role) {\n      logs = logs.filter(log => log.role === role);\n    }\n\n    // Filter by date range\n    if (startDate) {\n      logs = logs.filter(log => log.timestamp >= startDate);\n    }\n    if (endDate) {\n      logs = logs.filter(log => log.timestamp <= endDate);\n    }\n\n    // Limit results\n    if (limit) {\n      logs = logs.slice(0, limit);\n    }\n\n    return logs;\n  }\n\n  /**\n   * Clear all access logs (admin only)\n   */\n  public static clearLogs(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n\n  /**\n   * Get basic access statistics\n   */\n  public static getStats(): {\n    totalLogins: number;\n    adminLogins: number;\n    userLogins: number;\n    todayLogins: number;\n  } {\n    const logs = this.getAccessLogs();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const adminLogins = logs.filter(log => log.role === 'admin').length;\n    const userLogins = logs.filter(log => log.role === 'user').length;\n    const todayLogins = logs.filter(log => log.timestamp >= today).length;\n\n    return {\n      totalLogins: logs.length,\n      adminLogins,\n      userLogins,\n      todayLogins\n    };\n  }\n}","size_bytes":3131},"replit.md":{"content":"# IT Equipment Rental Management System - P&D Inc\n\n## Overview\n\nThis is a comprehensive IT equipment rental management system designed for P&D Inc (피앤디아이앤씨), built as a full-stack web application with React frontend and Node.js/Express backend. The system manages the rental lifecycle of IT equipment including routers, switches, wireless devices, transceivers, and consumables with a multi-tier approval workflow.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with Material Design principles\n- **State Management**: React Query (@tanstack/react-query) for server state\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API with `/api` prefix\n- **Session Management**: Session-based authentication with 8-hour timeout\n- **File Structure**: Modular approach with separate routes and storage layers\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: Comprehensive relational design with enums for categories, statuses, and roles\n- **Key Tables**:\n  - `users`: Authentication and role management (admin/user)\n  - `items`: Equipment inventory with category-based serial number requirements\n  - `rentals`: Rental requests and lifecycle tracking\n  - `approvals`: Multi-tier approval workflow for consumables\n\n### Authentication System\n- **Method**: Simple login with Daou Office ID (email prefix) + name + department\n- **Authorization**: Role-based access (admin vs user) with department-specific permissions\n- **Admin Access**: Password-protected for \"상품운용팀\" (Product Operations Team)\n- **Session Storage**: Server-side session management\n\n### Design System\n- **Theme**: Material Design with enterprise focus\n- **Color Palette**: Primary blue (210 100% 50%) with status-specific colors\n- **Typography**: Roboto font family\n- **Responsive**: PC browser optimized with mobile considerations\n- **Dark Mode**: Built-in support with CSS custom properties\n\n### Business Logic Architecture\n- **Equipment Categories**: 라우터, 스위치, 무선 제품군, 트랜시버, 소모품류\n- **Serial Number Management**: Required for hardware, optional for consumables\n- **Approval Workflow**: \n  - Single admin approval for hardware\n  - Dual admin approval required for consumables\n- **Status Tracking**: Complete lifecycle from request to return\n- **Notification System**: SMTP email alerts for approvals and overdue items\n\n### File Organization\n- **Shared Schema**: Common TypeScript types and database schema in `/shared`\n- **Client**: React application in `/client` with component-based architecture\n- **Server**: Express backend in `/server` with route and storage abstraction\n- **Assets**: Company logo and static assets management\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm**: Type-safe database ORM with PostgreSQL support\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React routing\n\n### UI Component Libraries\n- **@radix-ui/***: Headless UI primitives for accessibility\n- **class-variance-authority**: Type-safe component variant management\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Consistent icon library\n\n### Form and Validation\n- **react-hook-form**: Performant form handling\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: TypeScript-first schema validation\n- **drizzle-zod**: Integration between Drizzle and Zod\n\n### Development Tools\n- **vite**: Fast development server and build tool\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production\n\n### Utility Libraries\n- **date-fns**: Modern date utility library\n- **clsx**: Utility for constructing className strings\n- **nanoid**: URL-safe unique string ID generator\n\n### Email Integration\n- **SMTP Configuration**: Ready for email notification system integration\n- **Connect-pg-simple**: PostgreSQL session store for Express\n\n### Deployment Architecture\n- **Target Platform**: Synology DS1821+ NAS with Docker\n- **Container**: Docker Compose setup\n- **Port**: 8090 (configured for NAS deployment)\n- **Database**: PostgreSQL with 5-year data retention policy","size_bytes":4642},"server/email.ts":{"content":"// SendGrid email service - based on blueprint:javascript_sendgrid\nimport { MailService } from '@sendgrid/mail';\n\nconst mailService = new MailService();\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.warn('SENDGRID_API_KEY not configured, skipping email send');\n      return false;\n    }\n\n    mailService.setApiKey(process.env.SENDGRID_API_KEY);\n\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    \n    console.log(`Email sent successfully to ${params.to}`);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\n// Email templates for rental system\nexport const emailTemplates = {\n  rentalRequest: (userName: string, itemName: string, expectedReturnDate: Date) => ({\n    subject: `[P&D I&C] 대여 신청 - ${itemName}`,\n    text: `${userName}님이 ${itemName} 대여를 신청했습니다.\\n반납예정일: ${expectedReturnDate.toLocaleDateString('ko-KR')}\\n\\n승인처리를 위해 시스템에 로그인해주세요.`,\n    html: `\n      <h2>대여 신청 알림</h2>\n      <p><strong>${userName}</strong>님이 대여 신청을 했습니다.</p>\n      <ul>\n        <li><strong>물품명:</strong> ${itemName}</li>\n        <li><strong>반납예정일:</strong> ${expectedReturnDate.toLocaleDateString('ko-KR')}</li>\n      </ul>\n      <p>승인처리를 위해 시스템에 로그인해주세요.</p>\n    `\n  }),\n\n  rentalApproved: (userName: string, itemName: string, expectedReturnDate: Date) => ({\n    subject: `[P&D I&C] 대여 승인 - ${itemName}`,\n    text: `${userName}님의 ${itemName} 대여가 승인되었습니다.\\n반납예정일: ${expectedReturnDate.toLocaleDateString('ko-KR')}\\n\\n물품 수령 후 사용해주세요.`,\n    html: `\n      <h2>대여 승인 알림</h2>\n      <p><strong>${userName}</strong>님, 대여 신청이 승인되었습니다.</p>\n      <ul>\n        <li><strong>물품명:</strong> ${itemName}</li>\n        <li><strong>반납예정일:</strong> ${expectedReturnDate.toLocaleDateString('ko-KR')}</li>\n      </ul>\n      <p>물품 수령 후 사용해주세요.</p>\n    `\n  }),\n\n  rentalRejected: (userName: string, itemName: string, reason?: string) => ({\n    subject: `[P&D I&C] 대여 거절 - ${itemName}`,\n    text: `${userName}님의 ${itemName} 대여가 거절되었습니다.${reason ? `\\n사유: ${reason}` : ''}\\n\\n문의사항이 있으시면 관리자에게 연락해주세요.`,\n    html: `\n      <h2>대여 거절 알림</h2>\n      <p><strong>${userName}</strong>님, 대여 신청이 거절되었습니다.</p>\n      <ul>\n        <li><strong>물품명:</strong> ${itemName}</li>\n        ${reason ? `<li><strong>사유:</strong> ${reason}</li>` : ''}\n      </ul>\n      <p>문의사항이 있으시면 관리자에게 연락해주세요.</p>\n    `\n  }),\n\n  overdue: (userName: string, itemName: string, overdueDate: Date) => ({\n    subject: `[P&D I&C] 반납 연체 알림 - ${itemName}`,\n    text: `${userName}님, ${itemName}의 반납이 ${overdueDate.toLocaleDateString('ko-KR')}부터 연체되었습니다.\\n빠른 시일 내에 반납해주세요.`,\n    html: `\n      <h2>반납 연체 알림</h2>\n      <p><strong>${userName}</strong>님, 대여물품 반납이 연체되었습니다.</p>\n      <ul>\n        <li><strong>물품명:</strong> ${itemName}</li>\n        <li><strong>연체시작일:</strong> ${overdueDate.toLocaleDateString('ko-KR')}</li>\n      </ul>\n      <p style=\"color: red;\"><strong>빠른 시일 내에 반납해주세요.</strong></p>\n    `\n  })\n};","size_bytes":3809}},"version":1}